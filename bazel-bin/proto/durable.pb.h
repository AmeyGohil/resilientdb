// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/durable.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdurable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdurable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdurable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdurable_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdurable_2eproto;
namespace resdb {
class LevelDBInfo;
struct LevelDBInfoDefaultTypeInternal;
extern LevelDBInfoDefaultTypeInternal _LevelDBInfo_default_instance_;
class RocksDBInfo;
struct RocksDBInfoDefaultTypeInternal;
extern RocksDBInfoDefaultTypeInternal _RocksDBInfo_default_instance_;
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> ::resdb::LevelDBInfo* Arena::CreateMaybeMessage<::resdb::LevelDBInfo>(Arena*);
template<> ::resdb::RocksDBInfo* Arena::CreateMaybeMessage<::resdb::RocksDBInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resdb {

// ===================================================================

class RocksDBInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.RocksDBInfo) */ {
 public:
  inline RocksDBInfo() : RocksDBInfo(nullptr) {}
  ~RocksDBInfo() override;
  explicit constexpr RocksDBInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RocksDBInfo(const RocksDBInfo& from);
  RocksDBInfo(RocksDBInfo&& from) noexcept
    : RocksDBInfo() {
    *this = ::std::move(from);
  }

  inline RocksDBInfo& operator=(const RocksDBInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RocksDBInfo& operator=(RocksDBInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RocksDBInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RocksDBInfo* internal_default_instance() {
    return reinterpret_cast<const RocksDBInfo*>(
               &_RocksDBInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RocksDBInfo& a, RocksDBInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RocksDBInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RocksDBInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RocksDBInfo* New() const final {
    return new RocksDBInfo();
  }

  RocksDBInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RocksDBInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RocksDBInfo& from);
  void MergeFrom(const RocksDBInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RocksDBInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.RocksDBInfo";
  }
  protected:
  explicit RocksDBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 5,
    kEnableRocksdbFieldNumber = 1,
    kNumThreadsFieldNumber = 2,
    kWriteBufferSizeMbFieldNumber = 3,
    kWriteBatchSizeFieldNumber = 4,
  };
  // optional string path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool enable_rocksdb = 1;
  void clear_enable_rocksdb();
  bool enable_rocksdb() const;
  void set_enable_rocksdb(bool value);
  private:
  bool _internal_enable_rocksdb() const;
  void _internal_set_enable_rocksdb(bool value);
  public:

  // uint32 num_threads = 2;
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_threads() const;
  void _internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 write_buffer_size_mb = 3;
  void clear_write_buffer_size_mb();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_buffer_size_mb() const;
  void set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_buffer_size_mb() const;
  void _internal_set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 write_batch_size = 4;
  void clear_write_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_batch_size() const;
  void set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_batch_size() const;
  void _internal_set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.RocksDBInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  bool enable_rocksdb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_buffer_size_mb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_batch_size_;
  friend struct ::TableStruct_proto_2fdurable_2eproto;
};
// -------------------------------------------------------------------

class LevelDBInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.LevelDBInfo) */ {
 public:
  inline LevelDBInfo() : LevelDBInfo(nullptr) {}
  ~LevelDBInfo() override;
  explicit constexpr LevelDBInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LevelDBInfo(const LevelDBInfo& from);
  LevelDBInfo(LevelDBInfo&& from) noexcept
    : LevelDBInfo() {
    *this = ::std::move(from);
  }

  inline LevelDBInfo& operator=(const LevelDBInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LevelDBInfo& operator=(LevelDBInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LevelDBInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LevelDBInfo* internal_default_instance() {
    return reinterpret_cast<const LevelDBInfo*>(
               &_LevelDBInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LevelDBInfo& a, LevelDBInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LevelDBInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LevelDBInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LevelDBInfo* New() const final {
    return new LevelDBInfo();
  }

  LevelDBInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LevelDBInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LevelDBInfo& from);
  void MergeFrom(const LevelDBInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LevelDBInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.LevelDBInfo";
  }
  protected:
  explicit LevelDBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 5,
    kEnableLeveldbFieldNumber = 1,
    kNumThreadsFieldNumber = 2,
    kWriteBufferSizeMbFieldNumber = 3,
    kWriteBatchSizeFieldNumber = 4,
  };
  // optional string path = 5;
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // bool enable_leveldb = 1;
  void clear_enable_leveldb();
  bool enable_leveldb() const;
  void set_enable_leveldb(bool value);
  private:
  bool _internal_enable_leveldb() const;
  void _internal_set_enable_leveldb(bool value);
  public:

  // uint32 num_threads = 2;
  void clear_num_threads();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads() const;
  void set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_threads() const;
  void _internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 write_buffer_size_mb = 3;
  void clear_write_buffer_size_mb();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_buffer_size_mb() const;
  void set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_buffer_size_mb() const;
  void _internal_set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 write_batch_size = 4;
  void clear_write_batch_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_batch_size() const;
  void set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_batch_size() const;
  void _internal_set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.LevelDBInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  bool enable_leveldb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_threads_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_buffer_size_mb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_batch_size_;
  friend struct ::TableStruct_proto_2fdurable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RocksDBInfo

// bool enable_rocksdb = 1;
inline void RocksDBInfo::clear_enable_rocksdb() {
  enable_rocksdb_ = false;
}
inline bool RocksDBInfo::_internal_enable_rocksdb() const {
  return enable_rocksdb_;
}
inline bool RocksDBInfo::enable_rocksdb() const {
  // @@protoc_insertion_point(field_get:resdb.RocksDBInfo.enable_rocksdb)
  return _internal_enable_rocksdb();
}
inline void RocksDBInfo::_internal_set_enable_rocksdb(bool value) {
  
  enable_rocksdb_ = value;
}
inline void RocksDBInfo::set_enable_rocksdb(bool value) {
  _internal_set_enable_rocksdb(value);
  // @@protoc_insertion_point(field_set:resdb.RocksDBInfo.enable_rocksdb)
}

// uint32 num_threads = 2;
inline void RocksDBInfo::clear_num_threads() {
  num_threads_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::_internal_num_threads() const {
  return num_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::num_threads() const {
  // @@protoc_insertion_point(field_get:resdb.RocksDBInfo.num_threads)
  return _internal_num_threads();
}
inline void RocksDBInfo::_internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_threads_ = value;
}
inline void RocksDBInfo::set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:resdb.RocksDBInfo.num_threads)
}

// uint32 write_buffer_size_mb = 3;
inline void RocksDBInfo::clear_write_buffer_size_mb() {
  write_buffer_size_mb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::_internal_write_buffer_size_mb() const {
  return write_buffer_size_mb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::write_buffer_size_mb() const {
  // @@protoc_insertion_point(field_get:resdb.RocksDBInfo.write_buffer_size_mb)
  return _internal_write_buffer_size_mb();
}
inline void RocksDBInfo::_internal_set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_buffer_size_mb_ = value;
}
inline void RocksDBInfo::set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_buffer_size_mb(value);
  // @@protoc_insertion_point(field_set:resdb.RocksDBInfo.write_buffer_size_mb)
}

// uint32 write_batch_size = 4;
inline void RocksDBInfo::clear_write_batch_size() {
  write_batch_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::_internal_write_batch_size() const {
  return write_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RocksDBInfo::write_batch_size() const {
  // @@protoc_insertion_point(field_get:resdb.RocksDBInfo.write_batch_size)
  return _internal_write_batch_size();
}
inline void RocksDBInfo::_internal_set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_batch_size_ = value;
}
inline void RocksDBInfo::set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_batch_size(value);
  // @@protoc_insertion_point(field_set:resdb.RocksDBInfo.write_batch_size)
}

// optional string path = 5;
inline bool RocksDBInfo::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RocksDBInfo::has_path() const {
  return _internal_has_path();
}
inline void RocksDBInfo::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RocksDBInfo::path() const {
  // @@protoc_insertion_point(field_get:resdb.RocksDBInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RocksDBInfo::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.RocksDBInfo.path)
}
inline std::string* RocksDBInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:resdb.RocksDBInfo.path)
  return _internal_mutable_path();
}
inline const std::string& RocksDBInfo::_internal_path() const {
  return path_.Get();
}
inline void RocksDBInfo::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RocksDBInfo::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RocksDBInfo::release_path() {
  // @@protoc_insertion_point(field_release:resdb.RocksDBInfo.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RocksDBInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.RocksDBInfo.path)
}

// -------------------------------------------------------------------

// LevelDBInfo

// bool enable_leveldb = 1;
inline void LevelDBInfo::clear_enable_leveldb() {
  enable_leveldb_ = false;
}
inline bool LevelDBInfo::_internal_enable_leveldb() const {
  return enable_leveldb_;
}
inline bool LevelDBInfo::enable_leveldb() const {
  // @@protoc_insertion_point(field_get:resdb.LevelDBInfo.enable_leveldb)
  return _internal_enable_leveldb();
}
inline void LevelDBInfo::_internal_set_enable_leveldb(bool value) {
  
  enable_leveldb_ = value;
}
inline void LevelDBInfo::set_enable_leveldb(bool value) {
  _internal_set_enable_leveldb(value);
  // @@protoc_insertion_point(field_set:resdb.LevelDBInfo.enable_leveldb)
}

// uint32 num_threads = 2;
inline void LevelDBInfo::clear_num_threads() {
  num_threads_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::_internal_num_threads() const {
  return num_threads_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::num_threads() const {
  // @@protoc_insertion_point(field_get:resdb.LevelDBInfo.num_threads)
  return _internal_num_threads();
}
inline void LevelDBInfo::_internal_set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  num_threads_ = value;
}
inline void LevelDBInfo::set_num_threads(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_threads(value);
  // @@protoc_insertion_point(field_set:resdb.LevelDBInfo.num_threads)
}

// uint32 write_buffer_size_mb = 3;
inline void LevelDBInfo::clear_write_buffer_size_mb() {
  write_buffer_size_mb_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::_internal_write_buffer_size_mb() const {
  return write_buffer_size_mb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::write_buffer_size_mb() const {
  // @@protoc_insertion_point(field_get:resdb.LevelDBInfo.write_buffer_size_mb)
  return _internal_write_buffer_size_mb();
}
inline void LevelDBInfo::_internal_set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_buffer_size_mb_ = value;
}
inline void LevelDBInfo::set_write_buffer_size_mb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_buffer_size_mb(value);
  // @@protoc_insertion_point(field_set:resdb.LevelDBInfo.write_buffer_size_mb)
}

// uint32 write_batch_size = 4;
inline void LevelDBInfo::clear_write_batch_size() {
  write_batch_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::_internal_write_batch_size() const {
  return write_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LevelDBInfo::write_batch_size() const {
  // @@protoc_insertion_point(field_get:resdb.LevelDBInfo.write_batch_size)
  return _internal_write_batch_size();
}
inline void LevelDBInfo::_internal_set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_batch_size_ = value;
}
inline void LevelDBInfo::set_write_batch_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_batch_size(value);
  // @@protoc_insertion_point(field_set:resdb.LevelDBInfo.write_batch_size)
}

// optional string path = 5;
inline bool LevelDBInfo::_internal_has_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LevelDBInfo::has_path() const {
  return _internal_has_path();
}
inline void LevelDBInfo::clear_path() {
  path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LevelDBInfo::path() const {
  // @@protoc_insertion_point(field_get:resdb.LevelDBInfo.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LevelDBInfo::set_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.LevelDBInfo.path)
}
inline std::string* LevelDBInfo::mutable_path() {
  // @@protoc_insertion_point(field_mutable:resdb.LevelDBInfo.path)
  return _internal_mutable_path();
}
inline const std::string& LevelDBInfo::_internal_path() const {
  return path_.Get();
}
inline void LevelDBInfo::_internal_set_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LevelDBInfo::_internal_mutable_path() {
  _has_bits_[0] |= 0x00000001u;
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LevelDBInfo::release_path() {
  // @@protoc_insertion_point(field_release:resdb.LevelDBInfo.path)
  if (!_internal_has_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return path_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LevelDBInfo::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.LevelDBInfo.path)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdurable_2eproto
