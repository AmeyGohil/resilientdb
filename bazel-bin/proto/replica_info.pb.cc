// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/replica_info.proto

#include "proto/replica_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resdb {
constexpr ReplicaInfo::ReplicaInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , certificate_info_(nullptr)
  , id_(int64_t{0})
  , port_(0){}
struct ReplicaInfoDefaultTypeInternal {
  constexpr ReplicaInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplicaInfoDefaultTypeInternal() {}
  union {
    ReplicaInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplicaInfoDefaultTypeInternal _ReplicaInfo_default_instance_;
constexpr RegionInfo::RegionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replica_info_()
  , region_id_(0){}
struct RegionInfoDefaultTypeInternal {
  constexpr RegionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RegionInfoDefaultTypeInternal() {}
  union {
    RegionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
constexpr ResConfigData::ResConfigData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : region_()
  , rocksdb_info_(nullptr)
  , leveldb_info_(nullptr)
  , self_region_id_(0){}
struct ResConfigDataDefaultTypeInternal {
  constexpr ResConfigDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResConfigDataDefaultTypeInternal() {}
  union {
    ResConfigData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResConfigDataDefaultTypeInternal _ResConfigData_default_instance_;
constexpr ReplicaStates::ReplicaStates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(){}
struct ReplicaStatesDefaultTypeInternal {
  constexpr ReplicaStatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplicaStatesDefaultTypeInternal() {}
  union {
    ReplicaStates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplicaStatesDefaultTypeInternal _ReplicaStates_default_instance_;
constexpr ReplicaState::ReplicaState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replica_info_(nullptr)
  , view_(int64_t{0}){}
struct ReplicaStateDefaultTypeInternal {
  constexpr ReplicaStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReplicaStateDefaultTypeInternal() {}
  union {
    ReplicaState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReplicaStateDefaultTypeInternal _ReplicaState_default_instance_;
}  // namespace resdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2freplica_5finfo_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2freplica_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2freplica_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2freplica_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, id_),
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, port_),
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaInfo, certificate_info_),
  ~0u,
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RegionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RegionInfo, replica_info_),
  PROTOBUF_FIELD_OFFSET(::resdb::RegionInfo, region_id_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, region_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, self_region_id_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, rocksdb_info_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResConfigData, leveldb_info_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaStates, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaState, view_),
  PROTOBUF_FIELD_OFFSET(::resdb::ReplicaState, replica_info_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::resdb::ReplicaInfo)},
  { 13, -1, sizeof(::resdb::RegionInfo)},
  { 20, 29, sizeof(::resdb::ResConfigData)},
  { 33, -1, sizeof(::resdb::ReplicaStates)},
  { 39, -1, sizeof(::resdb::ReplicaState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ReplicaInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RegionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ResConfigData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ReplicaStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ReplicaState_default_instance_),
};

const char descriptor_table_protodef_proto_2freplica_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030proto/replica_info.proto\022\005resdb\032\032proto"
  "/signature_info.proto\032\023proto/durable.pro"
  "to\"\231\001\n\013ReplicaInfo\022\n\n\002id\030\001 \001(\003\022\017\n\002ip\030\002 \001"
  "(\tH\000\210\001\001\022\021\n\004port\030\003 \001(\005H\001\210\001\001\0225\n\020certificat"
  "e_info\030\004 \001(\0132\026.resdb.CertificateInfoH\002\210\001"
  "\001B\005\n\003_ipB\007\n\005_portB\023\n\021_certificate_info\"I"
  "\n\nRegionInfo\022(\n\014replica_info\030\001 \003(\0132\022.res"
  "db.ReplicaInfo\022\021\n\tregion_id\030\002 \001(\005\"\312\001\n\rRe"
  "sConfigData\022!\n\006region\030\001 \003(\0132\021.resdb.Regi"
  "onInfo\022\026\n\016self_region_id\030\002 \001(\005\022-\n\014rocksd"
  "b_info\030\003 \001(\0132\022.resdb.RocksDBInfoH\000\210\001\001\022-\n"
  "\014leveldb_info\030\004 \001(\0132\022.resdb.LevelDBInfoH"
  "\001\210\001\001B\017\n\r_rocksdb_infoB\017\n\r_leveldb_info\"3"
  "\n\rReplicaStates\022\"\n\005state\030\001 \003(\0132\023.resdb.R"
  "eplicaState\"F\n\014ReplicaState\022\014\n\004view\030\001 \001("
  "\003\022(\n\014replica_info\030\002 \001(\0132\022.resdb.ReplicaI"
  "nfob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2freplica_5finfo_2eproto_deps[2] = {
  &::descriptor_table_proto_2fdurable_2eproto,
  &::descriptor_table_proto_2fsignature_5finfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2freplica_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2freplica_5finfo_2eproto = {
  false, false, 651, descriptor_table_protodef_proto_2freplica_5finfo_2eproto, "proto/replica_info.proto", 
  &descriptor_table_proto_2freplica_5finfo_2eproto_once, descriptor_table_proto_2freplica_5finfo_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_proto_2freplica_5finfo_2eproto::offsets,
  file_level_metadata_proto_2freplica_5finfo_2eproto, file_level_enum_descriptors_proto_2freplica_5finfo_2eproto, file_level_service_descriptors_proto_2freplica_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2freplica_5finfo_2eproto_getter() {
  return &descriptor_table_proto_2freplica_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2freplica_5finfo_2eproto(&descriptor_table_proto_2freplica_5finfo_2eproto);
namespace resdb {

// ===================================================================

class ReplicaInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ReplicaInfo>()._has_bits_);
  static void set_has_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_port(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::resdb::CertificateInfo& certificate_info(const ReplicaInfo* msg);
  static void set_has_certificate_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::resdb::CertificateInfo&
ReplicaInfo::_Internal::certificate_info(const ReplicaInfo* msg) {
  return *msg->certificate_info_;
}
void ReplicaInfo::clear_certificate_info() {
  if (certificate_info_ != nullptr) certificate_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ReplicaInfo::ReplicaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ReplicaInfo)
}
ReplicaInfo::ReplicaInfo(const ReplicaInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ip()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_certificate_info()) {
    certificate_info_ = new ::resdb::CertificateInfo(*from.certificate_info_);
  } else {
    certificate_info_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&id_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:resdb.ReplicaInfo)
}

void ReplicaInfo::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&certificate_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&certificate_info_)) + sizeof(port_));
}

ReplicaInfo::~ReplicaInfo() {
  // @@protoc_insertion_point(destructor:resdb.ReplicaInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete certificate_info_;
}

void ReplicaInfo::ArenaDtor(void* object) {
  ReplicaInfo* _this = reinterpret_cast< ReplicaInfo* >(object);
  (void)_this;
}
void ReplicaInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplicaInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ReplicaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(certificate_info_ != nullptr);
      certificate_info_->Clear();
    }
  }
  id_ = int64_t{0};
  port_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "resdb.ReplicaInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_port(&has_bits);
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .resdb.CertificateInfo certificate_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_certificate_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ReplicaInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // optional string ip = 2;
  if (_internal_has_ip()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "resdb.ReplicaInfo.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // optional int32 port = 3;
  if (_internal_has_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // optional .resdb.CertificateInfo certificate_info = 4;
  if (_internal_has_certificate_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::certificate_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ReplicaInfo)
  return target;
}

size_t ReplicaInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ReplicaInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string ip = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ip());
    }

    // optional .resdb.CertificateInfo certificate_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *certificate_info_);
    }

  }
  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  // optional int32 port = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ReplicaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ReplicaInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ReplicaInfo)
    MergeFrom(*source);
  }
}

void ReplicaInfo::MergeFrom(const ReplicaInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ReplicaInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ip(from._internal_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_certificate_info()->::resdb::CertificateInfo::MergeFrom(from._internal_certificate_info());
    }
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (cached_has_bits & 0x00000004u) {
    _internal_set_port(from._internal_port());
  }
}

void ReplicaInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ReplicaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaInfo::CopyFrom(const ReplicaInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ReplicaInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaInfo::IsInitialized() const {
  return true;
}

void ReplicaInfo::InternalSwap(ReplicaInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicaInfo, port_)
      + sizeof(ReplicaInfo::port_)
      - PROTOBUF_FIELD_OFFSET(ReplicaInfo, certificate_info_)>(
          reinterpret_cast<char*>(&certificate_info_),
          reinterpret_cast<char*>(&other->certificate_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2freplica_5finfo_2eproto_getter, &descriptor_table_proto_2freplica_5finfo_2eproto_once,
      file_level_metadata_proto_2freplica_5finfo_2eproto[0]);
}

// ===================================================================

class RegionInfo::_Internal {
 public:
};

RegionInfo::RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  replica_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RegionInfo)
}
RegionInfo::RegionInfo(const RegionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      replica_info_(from.replica_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  region_id_ = from.region_id_;
  // @@protoc_insertion_point(copy_constructor:resdb.RegionInfo)
}

void RegionInfo::SharedCtor() {
region_id_ = 0;
}

RegionInfo::~RegionInfo() {
  // @@protoc_insertion_point(destructor:resdb.RegionInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RegionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegionInfo::ArenaDtor(void* object) {
  RegionInfo* _this = reinterpret_cast< RegionInfo* >(object);
  (void)_this;
}
void RegionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RegionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RegionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RegionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  replica_info_.Clear();
  region_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.ReplicaInfo replica_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replica_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegionInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RegionInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.ReplicaInfo replica_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replica_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_replica_info(i), target, stream);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_region_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RegionInfo)
  return target;
}

size_t RegionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RegionInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.ReplicaInfo replica_info = 1;
  total_size += 1UL * this->_internal_replica_info_size();
  for (const auto& msg : this->replica_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 region_id = 2;
  if (this->region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_region_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegionInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RegionInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegionInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RegionInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RegionInfo)
    MergeFrom(*source);
  }
}

void RegionInfo::MergeFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RegionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  replica_info_.MergeFrom(from.replica_info_);
  if (from.region_id() != 0) {
    _internal_set_region_id(from._internal_region_id());
  }
}

void RegionInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegionInfo::CopyFrom(const RegionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RegionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfo::IsInitialized() const {
  return true;
}

void RegionInfo::InternalSwap(RegionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  replica_info_.InternalSwap(&other->replica_info_);
  swap(region_id_, other->region_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2freplica_5finfo_2eproto_getter, &descriptor_table_proto_2freplica_5finfo_2eproto_once,
      file_level_metadata_proto_2freplica_5finfo_2eproto[1]);
}

// ===================================================================

class ResConfigData::_Internal {
 public:
  using HasBits = decltype(std::declval<ResConfigData>()._has_bits_);
  static const ::resdb::RocksDBInfo& rocksdb_info(const ResConfigData* msg);
  static void set_has_rocksdb_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::resdb::LevelDBInfo& leveldb_info(const ResConfigData* msg);
  static void set_has_leveldb_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::resdb::RocksDBInfo&
ResConfigData::_Internal::rocksdb_info(const ResConfigData* msg) {
  return *msg->rocksdb_info_;
}
const ::resdb::LevelDBInfo&
ResConfigData::_Internal::leveldb_info(const ResConfigData* msg) {
  return *msg->leveldb_info_;
}
void ResConfigData::clear_rocksdb_info() {
  if (rocksdb_info_ != nullptr) rocksdb_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void ResConfigData::clear_leveldb_info() {
  if (leveldb_info_ != nullptr) leveldb_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ResConfigData::ResConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  region_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ResConfigData)
}
ResConfigData::ResConfigData(const ResConfigData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      region_(from.region_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rocksdb_info()) {
    rocksdb_info_ = new ::resdb::RocksDBInfo(*from.rocksdb_info_);
  } else {
    rocksdb_info_ = nullptr;
  }
  if (from._internal_has_leveldb_info()) {
    leveldb_info_ = new ::resdb::LevelDBInfo(*from.leveldb_info_);
  } else {
    leveldb_info_ = nullptr;
  }
  self_region_id_ = from.self_region_id_;
  // @@protoc_insertion_point(copy_constructor:resdb.ResConfigData)
}

void ResConfigData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rocksdb_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&self_region_id_) -
    reinterpret_cast<char*>(&rocksdb_info_)) + sizeof(self_region_id_));
}

ResConfigData::~ResConfigData() {
  // @@protoc_insertion_point(destructor:resdb.ResConfigData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResConfigData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete rocksdb_info_;
  if (this != internal_default_instance()) delete leveldb_info_;
}

void ResConfigData::ArenaDtor(void* object) {
  ResConfigData* _this = reinterpret_cast< ResConfigData* >(object);
  (void)_this;
}
void ResConfigData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResConfigData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ResConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  region_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rocksdb_info_ != nullptr);
      rocksdb_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(leveldb_info_ != nullptr);
      leveldb_info_->Clear();
    }
  }
  self_region_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResConfigData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.RegionInfo region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_region(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 self_region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          self_region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .resdb.RocksDBInfo rocksdb_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rocksdb_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .resdb.LevelDBInfo leveldb_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_leveldb_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResConfigData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ResConfigData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.RegionInfo region = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_region_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_region(i), target, stream);
  }

  // int32 self_region_id = 2;
  if (this->self_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_self_region_id(), target);
  }

  // optional .resdb.RocksDBInfo rocksdb_info = 3;
  if (_internal_has_rocksdb_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rocksdb_info(this), target, stream);
  }

  // optional .resdb.LevelDBInfo leveldb_info = 4;
  if (_internal_has_leveldb_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::leveldb_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ResConfigData)
  return target;
}

size_t ResConfigData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ResConfigData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.RegionInfo region = 1;
  total_size += 1UL * this->_internal_region_size();
  for (const auto& msg : this->region_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .resdb.RocksDBInfo rocksdb_info = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rocksdb_info_);
    }

    // optional .resdb.LevelDBInfo leveldb_info = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *leveldb_info_);
    }

  }
  // int32 self_region_id = 2;
  if (this->self_region_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_self_region_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResConfigData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ResConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResConfigData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResConfigData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ResConfigData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ResConfigData)
    MergeFrom(*source);
  }
}

void ResConfigData::MergeFrom(const ResConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ResConfigData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  region_.MergeFrom(from.region_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rocksdb_info()->::resdb::RocksDBInfo::MergeFrom(from._internal_rocksdb_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_leveldb_info()->::resdb::LevelDBInfo::MergeFrom(from._internal_leveldb_info());
    }
  }
  if (from.self_region_id() != 0) {
    _internal_set_self_region_id(from._internal_self_region_id());
  }
}

void ResConfigData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ResConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResConfigData::CopyFrom(const ResConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ResConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResConfigData::IsInitialized() const {
  return true;
}

void ResConfigData::InternalSwap(ResConfigData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  region_.InternalSwap(&other->region_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResConfigData, self_region_id_)
      + sizeof(ResConfigData::self_region_id_)
      - PROTOBUF_FIELD_OFFSET(ResConfigData, rocksdb_info_)>(
          reinterpret_cast<char*>(&rocksdb_info_),
          reinterpret_cast<char*>(&other->rocksdb_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResConfigData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2freplica_5finfo_2eproto_getter, &descriptor_table_proto_2freplica_5finfo_2eproto_once,
      file_level_metadata_proto_2freplica_5finfo_2eproto[2]);
}

// ===================================================================

class ReplicaStates::_Internal {
 public:
};

ReplicaStates::ReplicaStates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  state_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ReplicaStates)
}
ReplicaStates::ReplicaStates(const ReplicaStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.ReplicaStates)
}

void ReplicaStates::SharedCtor() {
}

ReplicaStates::~ReplicaStates() {
  // @@protoc_insertion_point(destructor:resdb.ReplicaStates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaStates::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReplicaStates::ArenaDtor(void* object) {
  ReplicaStates* _this = reinterpret_cast< ReplicaStates* >(object);
  (void)_this;
}
void ReplicaStates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplicaStates::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ReplicaStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.ReplicaState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ReplicaStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.ReplicaState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ReplicaStates)
  return target;
}

size_t ReplicaStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ReplicaStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.ReplicaState state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ReplicaStates)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ReplicaStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ReplicaStates)
    MergeFrom(*source);
  }
}

void ReplicaStates::MergeFrom(const ReplicaStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ReplicaStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
}

void ReplicaStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ReplicaStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaStates::CopyFrom(const ReplicaStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ReplicaStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaStates::IsInitialized() const {
  return true;
}

void ReplicaStates::InternalSwap(ReplicaStates* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaStates::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2freplica_5finfo_2eproto_getter, &descriptor_table_proto_2freplica_5finfo_2eproto_once,
      file_level_metadata_proto_2freplica_5finfo_2eproto[3]);
}

// ===================================================================

class ReplicaState::_Internal {
 public:
  static const ::resdb::ReplicaInfo& replica_info(const ReplicaState* msg);
};

const ::resdb::ReplicaInfo&
ReplicaState::_Internal::replica_info(const ReplicaState* msg) {
  return *msg->replica_info_;
}
ReplicaState::ReplicaState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ReplicaState)
}
ReplicaState::ReplicaState(const ReplicaState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replica_info()) {
    replica_info_ = new ::resdb::ReplicaInfo(*from.replica_info_);
  } else {
    replica_info_ = nullptr;
  }
  view_ = from.view_;
  // @@protoc_insertion_point(copy_constructor:resdb.ReplicaState)
}

void ReplicaState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&replica_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&view_) -
    reinterpret_cast<char*>(&replica_info_)) + sizeof(view_));
}

ReplicaState::~ReplicaState() {
  // @@protoc_insertion_point(destructor:resdb.ReplicaState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplicaState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete replica_info_;
}

void ReplicaState::ArenaDtor(void* object) {
  ReplicaState* _this = reinterpret_cast< ReplicaState* >(object);
  (void)_this;
}
void ReplicaState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplicaState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReplicaState::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ReplicaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && replica_info_ != nullptr) {
    delete replica_info_;
  }
  replica_info_ = nullptr;
  view_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplicaState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.ReplicaInfo replica_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplicaState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ReplicaState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 view = 1;
  if (this->view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_view(), target);
  }

  // .resdb.ReplicaInfo replica_info = 2;
  if (this->has_replica_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::replica_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ReplicaState)
  return target;
}

size_t ReplicaState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ReplicaState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .resdb.ReplicaInfo replica_info = 2;
  if (this->has_replica_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replica_info_);
  }

  // int64 view = 1;
  if (this->view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_view());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplicaState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ReplicaState)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplicaState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplicaState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ReplicaState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ReplicaState)
    MergeFrom(*source);
  }
}

void ReplicaState::MergeFrom(const ReplicaState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ReplicaState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replica_info()) {
    _internal_mutable_replica_info()->::resdb::ReplicaInfo::MergeFrom(from._internal_replica_info());
  }
  if (from.view() != 0) {
    _internal_set_view(from._internal_view());
  }
}

void ReplicaState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ReplicaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplicaState::CopyFrom(const ReplicaState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ReplicaState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplicaState::IsInitialized() const {
  return true;
}

void ReplicaState::InternalSwap(ReplicaState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplicaState, view_)
      + sizeof(ReplicaState::view_)
      - PROTOBUF_FIELD_OFFSET(ReplicaState, replica_info_)>(
          reinterpret_cast<char*>(&replica_info_),
          reinterpret_cast<char*>(&other->replica_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplicaState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2freplica_5finfo_2eproto_getter, &descriptor_table_proto_2freplica_5finfo_2eproto_once,
      file_level_metadata_proto_2freplica_5finfo_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resdb::ReplicaInfo* Arena::CreateMaybeMessage< ::resdb::ReplicaInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ReplicaInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RegionInfo* Arena::CreateMaybeMessage< ::resdb::RegionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RegionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ResConfigData* Arena::CreateMaybeMessage< ::resdb::ResConfigData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ResConfigData >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ReplicaStates* Arena::CreateMaybeMessage< ::resdb::ReplicaStates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ReplicaStates >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ReplicaState* Arena::CreateMaybeMessage< ::resdb::ReplicaState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ReplicaState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
