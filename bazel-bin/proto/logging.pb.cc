// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/logging.proto

#include "proto/logging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resdb {
constexpr LoggingInfo::LoggingInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(int64_t{0})
  , type_(0)
{}
struct LoggingInfoDefaultTypeInternal {
  constexpr LoggingInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LoggingInfoDefaultTypeInternal() {}
  union {
    LoggingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LoggingInfoDefaultTypeInternal _LoggingInfo_default_instance_;
}  // namespace resdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2flogging_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2flogging_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2flogging_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2flogging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::LoggingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::LoggingInfo, type_),
  PROTOBUF_FIELD_OFFSET(::resdb::LoggingInfo, seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::LoggingInfo, request_),
  PROTOBUF_FIELD_OFFSET(::resdb::LoggingInfo, signature_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::resdb::LoggingInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_LoggingInfo_default_instance_),
};

const char descriptor_table_protodef_proto_2flogging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/logging.proto\022\005resdb\"\256\001\n\013Logging"
  "Info\022%\n\004type\030\001 \001(\0162\027.resdb.LoggingInfo.T"
  "ype\022\013\n\003seq\030\002 \001(\003\022\017\n\007request\030\003 \001(\014\022\021\n\tsig"
  "nature\030\004 \001(\014\"G\n\004Type\022\010\n\004NONE\020\000\022\n\n\006ASSIGN"
  "\020\001\022\007\n\003ADD\020\002\022\t\n\005FETCH\020\003\022\n\n\006COMMIT\020\004\022\t\n\005CL"
  "EAR\020\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2flogging_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flogging_2eproto = {
  false, false, 213, descriptor_table_protodef_proto_2flogging_2eproto, "proto/logging.proto", 
  &descriptor_table_proto_2flogging_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_proto_2flogging_2eproto::offsets,
  file_level_metadata_proto_2flogging_2eproto, file_level_enum_descriptors_proto_2flogging_2eproto, file_level_service_descriptors_proto_2flogging_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2flogging_2eproto_getter() {
  return &descriptor_table_proto_2flogging_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2flogging_2eproto(&descriptor_table_proto_2flogging_2eproto);
namespace resdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingInfo_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2flogging_2eproto);
  return file_level_enum_descriptors_proto_2flogging_2eproto[0];
}
bool LoggingInfo_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoggingInfo_Type LoggingInfo::NONE;
constexpr LoggingInfo_Type LoggingInfo::ASSIGN;
constexpr LoggingInfo_Type LoggingInfo::ADD;
constexpr LoggingInfo_Type LoggingInfo::FETCH;
constexpr LoggingInfo_Type LoggingInfo::COMMIT;
constexpr LoggingInfo_Type LoggingInfo::CLEAR;
constexpr LoggingInfo_Type LoggingInfo::Type_MIN;
constexpr LoggingInfo_Type LoggingInfo::Type_MAX;
constexpr int LoggingInfo::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class LoggingInfo::_Internal {
 public:
};

LoggingInfo::LoggingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.LoggingInfo)
}
LoggingInfo::LoggingInfo(const LoggingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request().empty()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArenaForAllocation());
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_signature(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:resdb.LoggingInfo)
}

void LoggingInfo::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(type_));
}

LoggingInfo::~LoggingInfo() {
  // @@protoc_insertion_point(destructor:resdb.LoggingInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LoggingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingInfo::ArenaDtor(void* object) {
  LoggingInfo* _this = reinterpret_cast< LoggingInfo* >(object);
  (void)_this;
}
void LoggingInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LoggingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LoggingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.LoggingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.ClearToEmpty();
  signature_.ClearToEmpty();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoggingInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.LoggingInfo.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::resdb::LoggingInfo_Type>(val));
        } else goto handle_unusual;
        continue;
      // int64 seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LoggingInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.LoggingInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.LoggingInfo.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 seq = 2;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_seq(), target);
  }

  // bytes request = 3;
  if (!this->request().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_request(), target);
  }

  // bytes signature = 4;
  if (!this->signature().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_signature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.LoggingInfo)
  return target;
}

size_t LoggingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.LoggingInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes request = 3;
  if (!this->request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request());
  }

  // bytes signature = 4;
  if (!this->signature().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // int64 seq = 2;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_seq());
  }

  // .resdb.LoggingInfo.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.LoggingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.LoggingInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.LoggingInfo)
    MergeFrom(*source);
  }
}

void LoggingInfo::MergeFrom(const LoggingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.LoggingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.request().empty()) {
    _internal_set_request(from._internal_request());
  }
  if (!from.signature().empty()) {
    _internal_set_signature(from._internal_signature());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void LoggingInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.LoggingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingInfo::CopyFrom(const LoggingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.LoggingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingInfo::IsInitialized() const {
  return true;
}

void LoggingInfo::InternalSwap(LoggingInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_, GetArenaForAllocation(),
      &other->request_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &signature_, GetArenaForAllocation(),
      &other->signature_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoggingInfo, type_)
      + sizeof(LoggingInfo::type_)
      - PROTOBUF_FIELD_OFFSET(LoggingInfo, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2flogging_2eproto_getter, &descriptor_table_proto_2flogging_2eproto_once,
      file_level_metadata_proto_2flogging_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resdb::LoggingInfo* Arena::CreateMaybeMessage< ::resdb::LoggingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::LoggingInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
