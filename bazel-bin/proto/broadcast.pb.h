// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/broadcast.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fbroadcast_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fbroadcast_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fbroadcast_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fbroadcast_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fbroadcast_2eproto;
class BroadcastData;
struct BroadcastDataDefaultTypeInternal;
extern BroadcastDataDefaultTypeInternal _BroadcastData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::BroadcastData* Arena::CreateMaybeMessage<::BroadcastData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class BroadcastData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:BroadcastData) */ {
 public:
  inline BroadcastData() : BroadcastData(nullptr) {}
  ~BroadcastData() override;
  explicit constexpr BroadcastData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BroadcastData(const BroadcastData& from);
  BroadcastData(BroadcastData&& from) noexcept
    : BroadcastData() {
    *this = ::std::move(from);
  }

  inline BroadcastData& operator=(const BroadcastData& from) {
    CopyFrom(from);
    return *this;
  }
  inline BroadcastData& operator=(BroadcastData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BroadcastData& default_instance() {
    return *internal_default_instance();
  }
  static inline const BroadcastData* internal_default_instance() {
    return reinterpret_cast<const BroadcastData*>(
               &_BroadcastData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BroadcastData& a, BroadcastData& b) {
    a.Swap(&b);
  }
  inline void Swap(BroadcastData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BroadcastData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BroadcastData* New() const final {
    return new BroadcastData();
  }

  BroadcastData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BroadcastData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BroadcastData& from);
  void MergeFrom(const BroadcastData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BroadcastData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "BroadcastData";
  }
  protected:
  explicit BroadcastData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kIsRespFieldNumber = 2,
  };
  // repeated bytes data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  const std::string& data(int index) const;
  std::string* mutable_data(int index);
  void set_data(int index, const std::string& value);
  void set_data(int index, std::string&& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  std::string* add_data();
  void add_data(const std::string& value);
  void add_data(std::string&& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data();
  private:
  const std::string& _internal_data(int index) const;
  std::string* _internal_add_data();
  public:

  // bool is_resp = 2;
  void clear_is_resp();
  bool is_resp() const;
  void set_is_resp(bool value);
  private:
  bool _internal_is_resp() const;
  void _internal_set_is_resp(bool value);
  public:

  // @@protoc_insertion_point(class_scope:BroadcastData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_;
  bool is_resp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fbroadcast_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BroadcastData

// repeated bytes data = 1;
inline int BroadcastData::_internal_data_size() const {
  return data_.size();
}
inline int BroadcastData::data_size() const {
  return _internal_data_size();
}
inline void BroadcastData::clear_data() {
  data_.Clear();
}
inline std::string* BroadcastData::add_data() {
  // @@protoc_insertion_point(field_add_mutable:BroadcastData.data)
  return _internal_add_data();
}
inline const std::string& BroadcastData::_internal_data(int index) const {
  return data_.Get(index);
}
inline const std::string& BroadcastData::data(int index) const {
  // @@protoc_insertion_point(field_get:BroadcastData.data)
  return _internal_data(index);
}
inline std::string* BroadcastData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:BroadcastData.data)
  return data_.Mutable(index);
}
inline void BroadcastData::set_data(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:BroadcastData.data)
  data_.Mutable(index)->assign(value);
}
inline void BroadcastData::set_data(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:BroadcastData.data)
  data_.Mutable(index)->assign(std::move(value));
}
inline void BroadcastData::set_data(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:BroadcastData.data)
}
inline void BroadcastData::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:BroadcastData.data)
}
inline std::string* BroadcastData::_internal_add_data() {
  return data_.Add();
}
inline void BroadcastData::add_data(const std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:BroadcastData.data)
}
inline void BroadcastData::add_data(std::string&& value) {
  data_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:BroadcastData.data)
}
inline void BroadcastData::add_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:BroadcastData.data)
}
inline void BroadcastData::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:BroadcastData.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BroadcastData::data() const {
  // @@protoc_insertion_point(field_list:BroadcastData.data)
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BroadcastData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:BroadcastData.data)
  return &data_;
}

// bool is_resp = 2;
inline void BroadcastData::clear_is_resp() {
  is_resp_ = false;
}
inline bool BroadcastData::_internal_is_resp() const {
  return is_resp_;
}
inline bool BroadcastData::is_resp() const {
  // @@protoc_insertion_point(field_get:BroadcastData.is_resp)
  return _internal_is_resp();
}
inline void BroadcastData::_internal_set_is_resp(bool value) {
  
  is_resp_ = value;
}
inline void BroadcastData::set_is_resp(bool value) {
  _internal_set_is_resp(value);
  // @@protoc_insertion_point(field_set:BroadcastData.is_resp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fbroadcast_2eproto
