// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/checkpoint_info.proto

#include "proto/checkpoint_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resdb {
constexpr HashInfo::HashInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : last_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , current_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , last_block_hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HashInfoDefaultTypeInternal {
  constexpr HashInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HashInfoDefaultTypeInternal() {}
  union {
    HashInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HashInfoDefaultTypeInternal _HashInfo_default_instance_;
constexpr CheckPointData::CheckPointData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seq_(uint64_t{0u}){}
struct CheckPointDataDefaultTypeInternal {
  constexpr CheckPointDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CheckPointDataDefaultTypeInternal() {}
  union {
    CheckPointData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CheckPointDataDefaultTypeInternal _CheckPointData_default_instance_;
}  // namespace resdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fcheckpoint_5finfo_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fcheckpoint_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fcheckpoint_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fcheckpoint_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::HashInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::HashInfo, last_hash_),
  PROTOBUF_FIELD_OFFSET(::resdb::HashInfo, current_hash_),
  PROTOBUF_FIELD_OFFSET(::resdb::HashInfo, last_block_hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::CheckPointData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::CheckPointData, seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::CheckPointData, hash_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::resdb::HashInfo)},
  { 8, -1, sizeof(::resdb::CheckPointData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_HashInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_CheckPointData_default_instance_),
};

const char descriptor_table_protodef_proto_2fcheckpoint_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033proto/checkpoint_info.proto\022\005resdb\"L\n\010"
  "HashInfo\022\021\n\tlast_hash\030\001 \001(\014\022\024\n\014current_h"
  "ash\030\002 \001(\014\022\027\n\017last_block_hash\030\003 \001(\014\"+\n\016Ch"
  "eckPointData\022\013\n\003seq\030\001 \001(\004\022\014\n\004hash\030\002 \001(\014b"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fcheckpoint_5finfo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fcheckpoint_5finfo_2eproto = {
  false, false, 167, descriptor_table_protodef_proto_2fcheckpoint_5finfo_2eproto, "proto/checkpoint_info.proto", 
  &descriptor_table_proto_2fcheckpoint_5finfo_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fcheckpoint_5finfo_2eproto::offsets,
  file_level_metadata_proto_2fcheckpoint_5finfo_2eproto, file_level_enum_descriptors_proto_2fcheckpoint_5finfo_2eproto, file_level_service_descriptors_proto_2fcheckpoint_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fcheckpoint_5finfo_2eproto_getter() {
  return &descriptor_table_proto_2fcheckpoint_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fcheckpoint_5finfo_2eproto(&descriptor_table_proto_2fcheckpoint_5finfo_2eproto);
namespace resdb {

// ===================================================================

class HashInfo::_Internal {
 public:
};

HashInfo::HashInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.HashInfo)
}
HashInfo::HashInfo(const HashInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  last_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_hash().empty()) {
    last_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_hash(), 
      GetArenaForAllocation());
  }
  current_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_current_hash().empty()) {
    current_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_current_hash(), 
      GetArenaForAllocation());
  }
  last_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_last_block_hash().empty()) {
    last_block_hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_last_block_hash(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:resdb.HashInfo)
}

void HashInfo::SharedCtor() {
last_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
current_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
last_block_hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HashInfo::~HashInfo() {
  // @@protoc_insertion_point(destructor:resdb.HashInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HashInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  last_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  last_block_hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HashInfo::ArenaDtor(void* object) {
  HashInfo* _this = reinterpret_cast< HashInfo* >(object);
  (void)_this;
}
void HashInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HashInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HashInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.HashInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  last_hash_.ClearToEmpty();
  current_hash_.ClearToEmpty();
  last_block_hash_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HashInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes last_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_last_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes current_hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_current_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes last_block_hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_last_block_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HashInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.HashInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes last_hash = 1;
  if (!this->last_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_last_hash(), target);
  }

  // bytes current_hash = 2;
  if (!this->current_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_current_hash(), target);
  }

  // bytes last_block_hash = 3;
  if (!this->last_block_hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_last_block_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.HashInfo)
  return target;
}

size_t HashInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.HashInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes last_hash = 1;
  if (!this->last_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_hash());
  }

  // bytes current_hash = 2;
  if (!this->current_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_current_hash());
  }

  // bytes last_block_hash = 3;
  if (!this->last_block_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_last_block_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HashInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.HashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HashInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HashInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.HashInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.HashInfo)
    MergeFrom(*source);
  }
}

void HashInfo::MergeFrom(const HashInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.HashInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.last_hash().empty()) {
    _internal_set_last_hash(from._internal_last_hash());
  }
  if (!from.current_hash().empty()) {
    _internal_set_current_hash(from._internal_current_hash());
  }
  if (!from.last_block_hash().empty()) {
    _internal_set_last_block_hash(from._internal_last_block_hash());
  }
}

void HashInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.HashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashInfo::CopyFrom(const HashInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.HashInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashInfo::IsInitialized() const {
  return true;
}

void HashInfo::InternalSwap(HashInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_hash_, GetArenaForAllocation(),
      &other->last_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &current_hash_, GetArenaForAllocation(),
      &other->current_hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &last_block_hash_, GetArenaForAllocation(),
      &other->last_block_hash_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HashInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcheckpoint_5finfo_2eproto_getter, &descriptor_table_proto_2fcheckpoint_5finfo_2eproto_once,
      file_level_metadata_proto_2fcheckpoint_5finfo_2eproto[0]);
}

// ===================================================================

class CheckPointData::_Internal {
 public:
};

CheckPointData::CheckPointData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.CheckPointData)
}
CheckPointData::CheckPointData(const CheckPointData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:resdb.CheckPointData)
}

void CheckPointData::SharedCtor() {
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
seq_ = uint64_t{0u};
}

CheckPointData::~CheckPointData() {
  // @@protoc_insertion_point(destructor:resdb.CheckPointData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CheckPointData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckPointData::ArenaDtor(void* object) {
  CheckPointData* _this = reinterpret_cast< CheckPointData* >(object);
  (void)_this;
}
void CheckPointData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckPointData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CheckPointData::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.CheckPointData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hash_.ClearToEmpty();
  seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CheckPointData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckPointData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.CheckPointData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 seq = 1;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_seq(), target);
  }

  // bytes hash = 2;
  if (!this->hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.CheckPointData)
  return target;
}

size_t CheckPointData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.CheckPointData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes hash = 2;
  if (!this->hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // uint64 seq = 1;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckPointData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.CheckPointData)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckPointData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckPointData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.CheckPointData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.CheckPointData)
    MergeFrom(*source);
  }
}

void CheckPointData::MergeFrom(const CheckPointData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.CheckPointData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void CheckPointData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.CheckPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckPointData::CopyFrom(const CheckPointData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.CheckPointData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckPointData::IsInitialized() const {
  return true;
}

void CheckPointData::InternalSwap(CheckPointData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  swap(seq_, other->seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckPointData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fcheckpoint_5finfo_2eproto_getter, &descriptor_table_proto_2fcheckpoint_5finfo_2eproto_once,
      file_level_metadata_proto_2fcheckpoint_5finfo_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resdb::HashInfo* Arena::CreateMaybeMessage< ::resdb::HashInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::HashInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::CheckPointData* Arena::CreateMaybeMessage< ::resdb::CheckPointData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::CheckPointData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
