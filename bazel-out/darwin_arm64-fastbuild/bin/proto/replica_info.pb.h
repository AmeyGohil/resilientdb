// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/replica_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2freplica_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2freplica_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/signature_info.pb.h"
#include "proto/durable.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2freplica_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2freplica_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2freplica_5finfo_2eproto;
namespace resdb {
class RegionInfo;
struct RegionInfoDefaultTypeInternal;
extern RegionInfoDefaultTypeInternal _RegionInfo_default_instance_;
class ReplicaInfo;
struct ReplicaInfoDefaultTypeInternal;
extern ReplicaInfoDefaultTypeInternal _ReplicaInfo_default_instance_;
class ReplicaState;
struct ReplicaStateDefaultTypeInternal;
extern ReplicaStateDefaultTypeInternal _ReplicaState_default_instance_;
class ReplicaStates;
struct ReplicaStatesDefaultTypeInternal;
extern ReplicaStatesDefaultTypeInternal _ReplicaStates_default_instance_;
class ResConfigData;
struct ResConfigDataDefaultTypeInternal;
extern ResConfigDataDefaultTypeInternal _ResConfigData_default_instance_;
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> ::resdb::RegionInfo* Arena::CreateMaybeMessage<::resdb::RegionInfo>(Arena*);
template<> ::resdb::ReplicaInfo* Arena::CreateMaybeMessage<::resdb::ReplicaInfo>(Arena*);
template<> ::resdb::ReplicaState* Arena::CreateMaybeMessage<::resdb::ReplicaState>(Arena*);
template<> ::resdb::ReplicaStates* Arena::CreateMaybeMessage<::resdb::ReplicaStates>(Arena*);
template<> ::resdb::ResConfigData* Arena::CreateMaybeMessage<::resdb::ResConfigData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resdb {

// ===================================================================

class ReplicaInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.ReplicaInfo) */ {
 public:
  inline ReplicaInfo() : ReplicaInfo(nullptr) {}
  ~ReplicaInfo() override;
  explicit constexpr ReplicaInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicaInfo(const ReplicaInfo& from);
  ReplicaInfo(ReplicaInfo&& from) noexcept
    : ReplicaInfo() {
    *this = ::std::move(from);
  }

  inline ReplicaInfo& operator=(const ReplicaInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaInfo& operator=(ReplicaInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaInfo* internal_default_instance() {
    return reinterpret_cast<const ReplicaInfo*>(
               &_ReplicaInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReplicaInfo& a, ReplicaInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaInfo* New() const final {
    return new ReplicaInfo();
  }

  ReplicaInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaInfo& from);
  void MergeFrom(const ReplicaInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.ReplicaInfo";
  }
  protected:
  explicit ReplicaInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kCertificateInfoFieldNumber = 4,
    kIdFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // optional string ip = 2;
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // optional .resdb.CertificateInfo certificate_info = 4;
  bool has_certificate_info() const;
  private:
  bool _internal_has_certificate_info() const;
  public:
  void clear_certificate_info();
  const ::resdb::CertificateInfo& certificate_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::resdb::CertificateInfo* release_certificate_info();
  ::resdb::CertificateInfo* mutable_certificate_info();
  void set_allocated_certificate_info(::resdb::CertificateInfo* certificate_info);
  private:
  const ::resdb::CertificateInfo& _internal_certificate_info() const;
  ::resdb::CertificateInfo* _internal_mutable_certificate_info();
  public:
  void unsafe_arena_set_allocated_certificate_info(
      ::resdb::CertificateInfo* certificate_info);
  ::resdb::CertificateInfo* unsafe_arena_release_certificate_info();

  // int64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 port = 3;
  bool has_port() const;
  private:
  bool _internal_has_port() const;
  public:
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.ReplicaInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::resdb::CertificateInfo* certificate_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  friend struct ::TableStruct_proto_2freplica_5finfo_2eproto;
};
// -------------------------------------------------------------------

class RegionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.RegionInfo) */ {
 public:
  inline RegionInfo() : RegionInfo(nullptr) {}
  ~RegionInfo() override;
  explicit constexpr RegionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegionInfo(const RegionInfo& from);
  RegionInfo(RegionInfo&& from) noexcept
    : RegionInfo() {
    *this = ::std::move(from);
  }

  inline RegionInfo& operator=(const RegionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegionInfo& operator=(RegionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegionInfo* internal_default_instance() {
    return reinterpret_cast<const RegionInfo*>(
               &_RegionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RegionInfo& a, RegionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RegionInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegionInfo* New() const final {
    return new RegionInfo();
  }

  RegionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegionInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegionInfo& from);
  void MergeFrom(const RegionInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegionInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.RegionInfo";
  }
  protected:
  explicit RegionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicaInfoFieldNumber = 1,
    kRegionIdFieldNumber = 2,
  };
  // repeated .resdb.ReplicaInfo replica_info = 1;
  int replica_info_size() const;
  private:
  int _internal_replica_info_size() const;
  public:
  void clear_replica_info();
  ::resdb::ReplicaInfo* mutable_replica_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaInfo >*
      mutable_replica_info();
  private:
  const ::resdb::ReplicaInfo& _internal_replica_info(int index) const;
  ::resdb::ReplicaInfo* _internal_add_replica_info();
  public:
  const ::resdb::ReplicaInfo& replica_info(int index) const;
  ::resdb::ReplicaInfo* add_replica_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaInfo >&
      replica_info() const;

  // int32 region_id = 2;
  void clear_region_id();
  ::PROTOBUF_NAMESPACE_ID::int32 region_id() const;
  void set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_region_id() const;
  void _internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.RegionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaInfo > replica_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2freplica_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ResConfigData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.ResConfigData) */ {
 public:
  inline ResConfigData() : ResConfigData(nullptr) {}
  ~ResConfigData() override;
  explicit constexpr ResConfigData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResConfigData(const ResConfigData& from);
  ResConfigData(ResConfigData&& from) noexcept
    : ResConfigData() {
    *this = ::std::move(from);
  }

  inline ResConfigData& operator=(const ResConfigData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResConfigData& operator=(ResConfigData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResConfigData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResConfigData* internal_default_instance() {
    return reinterpret_cast<const ResConfigData*>(
               &_ResConfigData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResConfigData& a, ResConfigData& b) {
    a.Swap(&b);
  }
  inline void Swap(ResConfigData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResConfigData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResConfigData* New() const final {
    return new ResConfigData();
  }

  ResConfigData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResConfigData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResConfigData& from);
  void MergeFrom(const ResConfigData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResConfigData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.ResConfigData";
  }
  protected:
  explicit ResConfigData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegionFieldNumber = 1,
    kRocksdbInfoFieldNumber = 3,
    kLeveldbInfoFieldNumber = 4,
    kSelfRegionIdFieldNumber = 2,
  };
  // repeated .resdb.RegionInfo region = 1;
  int region_size() const;
  private:
  int _internal_region_size() const;
  public:
  void clear_region();
  ::resdb::RegionInfo* mutable_region(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::RegionInfo >*
      mutable_region();
  private:
  const ::resdb::RegionInfo& _internal_region(int index) const;
  ::resdb::RegionInfo* _internal_add_region();
  public:
  const ::resdb::RegionInfo& region(int index) const;
  ::resdb::RegionInfo* add_region();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::RegionInfo >&
      region() const;

  // optional .resdb.RocksDBInfo rocksdb_info = 3;
  bool has_rocksdb_info() const;
  private:
  bool _internal_has_rocksdb_info() const;
  public:
  void clear_rocksdb_info();
  const ::resdb::RocksDBInfo& rocksdb_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::resdb::RocksDBInfo* release_rocksdb_info();
  ::resdb::RocksDBInfo* mutable_rocksdb_info();
  void set_allocated_rocksdb_info(::resdb::RocksDBInfo* rocksdb_info);
  private:
  const ::resdb::RocksDBInfo& _internal_rocksdb_info() const;
  ::resdb::RocksDBInfo* _internal_mutable_rocksdb_info();
  public:
  void unsafe_arena_set_allocated_rocksdb_info(
      ::resdb::RocksDBInfo* rocksdb_info);
  ::resdb::RocksDBInfo* unsafe_arena_release_rocksdb_info();

  // optional .resdb.LevelDBInfo leveldb_info = 4;
  bool has_leveldb_info() const;
  private:
  bool _internal_has_leveldb_info() const;
  public:
  void clear_leveldb_info();
  const ::resdb::LevelDBInfo& leveldb_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::resdb::LevelDBInfo* release_leveldb_info();
  ::resdb::LevelDBInfo* mutable_leveldb_info();
  void set_allocated_leveldb_info(::resdb::LevelDBInfo* leveldb_info);
  private:
  const ::resdb::LevelDBInfo& _internal_leveldb_info() const;
  ::resdb::LevelDBInfo* _internal_mutable_leveldb_info();
  public:
  void unsafe_arena_set_allocated_leveldb_info(
      ::resdb::LevelDBInfo* leveldb_info);
  ::resdb::LevelDBInfo* unsafe_arena_release_leveldb_info();

  // int32 self_region_id = 2;
  void clear_self_region_id();
  ::PROTOBUF_NAMESPACE_ID::int32 self_region_id() const;
  void set_self_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_self_region_id() const;
  void _internal_set_self_region_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.ResConfigData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::RegionInfo > region_;
  ::resdb::RocksDBInfo* rocksdb_info_;
  ::resdb::LevelDBInfo* leveldb_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 self_region_id_;
  friend struct ::TableStruct_proto_2freplica_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ReplicaStates final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.ReplicaStates) */ {
 public:
  inline ReplicaStates() : ReplicaStates(nullptr) {}
  ~ReplicaStates() override;
  explicit constexpr ReplicaStates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicaStates(const ReplicaStates& from);
  ReplicaStates(ReplicaStates&& from) noexcept
    : ReplicaStates() {
    *this = ::std::move(from);
  }

  inline ReplicaStates& operator=(const ReplicaStates& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaStates& operator=(ReplicaStates&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaStates& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaStates* internal_default_instance() {
    return reinterpret_cast<const ReplicaStates*>(
               &_ReplicaStates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReplicaStates& a, ReplicaStates& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaStates* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaStates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaStates* New() const final {
    return new ReplicaStates();
  }

  ReplicaStates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaStates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaStates& from);
  void MergeFrom(const ReplicaStates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaStates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.ReplicaStates";
  }
  protected:
  explicit ReplicaStates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // repeated .resdb.ReplicaState state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::resdb::ReplicaState* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaState >*
      mutable_state();
  private:
  const ::resdb::ReplicaState& _internal_state(int index) const;
  ::resdb::ReplicaState* _internal_add_state();
  public:
  const ::resdb::ReplicaState& state(int index) const;
  ::resdb::ReplicaState* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaState >&
      state() const;

  // @@protoc_insertion_point(class_scope:resdb.ReplicaStates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaState > state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2freplica_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ReplicaState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.ReplicaState) */ {
 public:
  inline ReplicaState() : ReplicaState(nullptr) {}
  ~ReplicaState() override;
  explicit constexpr ReplicaState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplicaState(const ReplicaState& from);
  ReplicaState(ReplicaState&& from) noexcept
    : ReplicaState() {
    *this = ::std::move(from);
  }

  inline ReplicaState& operator=(const ReplicaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplicaState& operator=(ReplicaState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplicaState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplicaState* internal_default_instance() {
    return reinterpret_cast<const ReplicaState*>(
               &_ReplicaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReplicaState& a, ReplicaState& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplicaState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplicaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplicaState* New() const final {
    return new ReplicaState();
  }

  ReplicaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplicaState& from);
  void MergeFrom(const ReplicaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.ReplicaState";
  }
  protected:
  explicit ReplicaState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplicaInfoFieldNumber = 2,
    kViewFieldNumber = 1,
  };
  // .resdb.ReplicaInfo replica_info = 2;
  bool has_replica_info() const;
  private:
  bool _internal_has_replica_info() const;
  public:
  void clear_replica_info();
  const ::resdb::ReplicaInfo& replica_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::resdb::ReplicaInfo* release_replica_info();
  ::resdb::ReplicaInfo* mutable_replica_info();
  void set_allocated_replica_info(::resdb::ReplicaInfo* replica_info);
  private:
  const ::resdb::ReplicaInfo& _internal_replica_info() const;
  ::resdb::ReplicaInfo* _internal_mutable_replica_info();
  public:
  void unsafe_arena_set_allocated_replica_info(
      ::resdb::ReplicaInfo* replica_info);
  ::resdb::ReplicaInfo* unsafe_arena_release_replica_info();

  // int64 view = 1;
  void clear_view();
  ::PROTOBUF_NAMESPACE_ID::int64 view() const;
  void set_view(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_view() const;
  void _internal_set_view(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.ReplicaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::resdb::ReplicaInfo* replica_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2freplica_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReplicaInfo

// int64 id = 1;
inline void ReplicaInfo::clear_id() {
  id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaInfo::id() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaInfo.id)
  return _internal_id();
}
inline void ReplicaInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void ReplicaInfo::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:resdb.ReplicaInfo.id)
}

// optional string ip = 2;
inline bool ReplicaInfo::_internal_has_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReplicaInfo::has_ip() const {
  return _internal_has_ip();
}
inline void ReplicaInfo::clear_ip() {
  ip_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReplicaInfo::ip() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReplicaInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.ReplicaInfo.ip)
}
inline std::string* ReplicaInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:resdb.ReplicaInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& ReplicaInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ReplicaInfo::_internal_set_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReplicaInfo::_internal_mutable_ip() {
  _has_bits_[0] |= 0x00000001u;
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReplicaInfo::release_ip() {
  // @@protoc_insertion_point(field_release:resdb.ReplicaInfo.ip)
  if (!_internal_has_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReplicaInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.ReplicaInfo.ip)
}

// optional int32 port = 3;
inline bool ReplicaInfo::_internal_has_port() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReplicaInfo::has_port() const {
  return _internal_has_port();
}
inline void ReplicaInfo::clear_port() {
  port_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplicaInfo::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReplicaInfo::port() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaInfo.port)
  return _internal_port();
}
inline void ReplicaInfo::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  port_ = value;
}
inline void ReplicaInfo::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:resdb.ReplicaInfo.port)
}

// optional .resdb.CertificateInfo certificate_info = 4;
inline bool ReplicaInfo::_internal_has_certificate_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || certificate_info_ != nullptr);
  return value;
}
inline bool ReplicaInfo::has_certificate_info() const {
  return _internal_has_certificate_info();
}
inline const ::resdb::CertificateInfo& ReplicaInfo::_internal_certificate_info() const {
  const ::resdb::CertificateInfo* p = certificate_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::resdb::CertificateInfo&>(
      ::resdb::_CertificateInfo_default_instance_);
}
inline const ::resdb::CertificateInfo& ReplicaInfo::certificate_info() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaInfo.certificate_info)
  return _internal_certificate_info();
}
inline void ReplicaInfo::unsafe_arena_set_allocated_certificate_info(
    ::resdb::CertificateInfo* certificate_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate_info_);
  }
  certificate_info_ = certificate_info;
  if (certificate_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resdb.ReplicaInfo.certificate_info)
}
inline ::resdb::CertificateInfo* ReplicaInfo::release_certificate_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::resdb::CertificateInfo* temp = certificate_info_;
  certificate_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resdb::CertificateInfo* ReplicaInfo::unsafe_arena_release_certificate_info() {
  // @@protoc_insertion_point(field_release:resdb.ReplicaInfo.certificate_info)
  _has_bits_[0] &= ~0x00000002u;
  ::resdb::CertificateInfo* temp = certificate_info_;
  certificate_info_ = nullptr;
  return temp;
}
inline ::resdb::CertificateInfo* ReplicaInfo::_internal_mutable_certificate_info() {
  _has_bits_[0] |= 0x00000002u;
  if (certificate_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::resdb::CertificateInfo>(GetArenaForAllocation());
    certificate_info_ = p;
  }
  return certificate_info_;
}
inline ::resdb::CertificateInfo* ReplicaInfo::mutable_certificate_info() {
  // @@protoc_insertion_point(field_mutable:resdb.ReplicaInfo.certificate_info)
  return _internal_mutable_certificate_info();
}
inline void ReplicaInfo::set_allocated_certificate_info(::resdb::CertificateInfo* certificate_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate_info_);
  }
  if (certificate_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(certificate_info));
    if (message_arena != submessage_arena) {
      certificate_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, certificate_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  certificate_info_ = certificate_info;
  // @@protoc_insertion_point(field_set_allocated:resdb.ReplicaInfo.certificate_info)
}

// -------------------------------------------------------------------

// RegionInfo

// repeated .resdb.ReplicaInfo replica_info = 1;
inline int RegionInfo::_internal_replica_info_size() const {
  return replica_info_.size();
}
inline int RegionInfo::replica_info_size() const {
  return _internal_replica_info_size();
}
inline void RegionInfo::clear_replica_info() {
  replica_info_.Clear();
}
inline ::resdb::ReplicaInfo* RegionInfo::mutable_replica_info(int index) {
  // @@protoc_insertion_point(field_mutable:resdb.RegionInfo.replica_info)
  return replica_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaInfo >*
RegionInfo::mutable_replica_info() {
  // @@protoc_insertion_point(field_mutable_list:resdb.RegionInfo.replica_info)
  return &replica_info_;
}
inline const ::resdb::ReplicaInfo& RegionInfo::_internal_replica_info(int index) const {
  return replica_info_.Get(index);
}
inline const ::resdb::ReplicaInfo& RegionInfo::replica_info(int index) const {
  // @@protoc_insertion_point(field_get:resdb.RegionInfo.replica_info)
  return _internal_replica_info(index);
}
inline ::resdb::ReplicaInfo* RegionInfo::_internal_add_replica_info() {
  return replica_info_.Add();
}
inline ::resdb::ReplicaInfo* RegionInfo::add_replica_info() {
  // @@protoc_insertion_point(field_add:resdb.RegionInfo.replica_info)
  return _internal_add_replica_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaInfo >&
RegionInfo::replica_info() const {
  // @@protoc_insertion_point(field_list:resdb.RegionInfo.replica_info)
  return replica_info_;
}

// int32 region_id = 2;
inline void RegionInfo::clear_region_id() {
  region_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionInfo::_internal_region_id() const {
  return region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RegionInfo::region_id() const {
  // @@protoc_insertion_point(field_get:resdb.RegionInfo.region_id)
  return _internal_region_id();
}
inline void RegionInfo::_internal_set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  region_id_ = value;
}
inline void RegionInfo::set_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_region_id(value);
  // @@protoc_insertion_point(field_set:resdb.RegionInfo.region_id)
}

// -------------------------------------------------------------------

// ResConfigData

// repeated .resdb.RegionInfo region = 1;
inline int ResConfigData::_internal_region_size() const {
  return region_.size();
}
inline int ResConfigData::region_size() const {
  return _internal_region_size();
}
inline void ResConfigData::clear_region() {
  region_.Clear();
}
inline ::resdb::RegionInfo* ResConfigData::mutable_region(int index) {
  // @@protoc_insertion_point(field_mutable:resdb.ResConfigData.region)
  return region_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::RegionInfo >*
ResConfigData::mutable_region() {
  // @@protoc_insertion_point(field_mutable_list:resdb.ResConfigData.region)
  return &region_;
}
inline const ::resdb::RegionInfo& ResConfigData::_internal_region(int index) const {
  return region_.Get(index);
}
inline const ::resdb::RegionInfo& ResConfigData::region(int index) const {
  // @@protoc_insertion_point(field_get:resdb.ResConfigData.region)
  return _internal_region(index);
}
inline ::resdb::RegionInfo* ResConfigData::_internal_add_region() {
  return region_.Add();
}
inline ::resdb::RegionInfo* ResConfigData::add_region() {
  // @@protoc_insertion_point(field_add:resdb.ResConfigData.region)
  return _internal_add_region();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::RegionInfo >&
ResConfigData::region() const {
  // @@protoc_insertion_point(field_list:resdb.ResConfigData.region)
  return region_;
}

// int32 self_region_id = 2;
inline void ResConfigData::clear_self_region_id() {
  self_region_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResConfigData::_internal_self_region_id() const {
  return self_region_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ResConfigData::self_region_id() const {
  // @@protoc_insertion_point(field_get:resdb.ResConfigData.self_region_id)
  return _internal_self_region_id();
}
inline void ResConfigData::_internal_set_self_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  self_region_id_ = value;
}
inline void ResConfigData::set_self_region_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_self_region_id(value);
  // @@protoc_insertion_point(field_set:resdb.ResConfigData.self_region_id)
}

// optional .resdb.RocksDBInfo rocksdb_info = 3;
inline bool ResConfigData::_internal_has_rocksdb_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rocksdb_info_ != nullptr);
  return value;
}
inline bool ResConfigData::has_rocksdb_info() const {
  return _internal_has_rocksdb_info();
}
inline const ::resdb::RocksDBInfo& ResConfigData::_internal_rocksdb_info() const {
  const ::resdb::RocksDBInfo* p = rocksdb_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::resdb::RocksDBInfo&>(
      ::resdb::_RocksDBInfo_default_instance_);
}
inline const ::resdb::RocksDBInfo& ResConfigData::rocksdb_info() const {
  // @@protoc_insertion_point(field_get:resdb.ResConfigData.rocksdb_info)
  return _internal_rocksdb_info();
}
inline void ResConfigData::unsafe_arena_set_allocated_rocksdb_info(
    ::resdb::RocksDBInfo* rocksdb_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rocksdb_info_);
  }
  rocksdb_info_ = rocksdb_info;
  if (rocksdb_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resdb.ResConfigData.rocksdb_info)
}
inline ::resdb::RocksDBInfo* ResConfigData::release_rocksdb_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::resdb::RocksDBInfo* temp = rocksdb_info_;
  rocksdb_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resdb::RocksDBInfo* ResConfigData::unsafe_arena_release_rocksdb_info() {
  // @@protoc_insertion_point(field_release:resdb.ResConfigData.rocksdb_info)
  _has_bits_[0] &= ~0x00000001u;
  ::resdb::RocksDBInfo* temp = rocksdb_info_;
  rocksdb_info_ = nullptr;
  return temp;
}
inline ::resdb::RocksDBInfo* ResConfigData::_internal_mutable_rocksdb_info() {
  _has_bits_[0] |= 0x00000001u;
  if (rocksdb_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::resdb::RocksDBInfo>(GetArenaForAllocation());
    rocksdb_info_ = p;
  }
  return rocksdb_info_;
}
inline ::resdb::RocksDBInfo* ResConfigData::mutable_rocksdb_info() {
  // @@protoc_insertion_point(field_mutable:resdb.ResConfigData.rocksdb_info)
  return _internal_mutable_rocksdb_info();
}
inline void ResConfigData::set_allocated_rocksdb_info(::resdb::RocksDBInfo* rocksdb_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rocksdb_info_);
  }
  if (rocksdb_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rocksdb_info));
    if (message_arena != submessage_arena) {
      rocksdb_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rocksdb_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rocksdb_info_ = rocksdb_info;
  // @@protoc_insertion_point(field_set_allocated:resdb.ResConfigData.rocksdb_info)
}

// optional .resdb.LevelDBInfo leveldb_info = 4;
inline bool ResConfigData::_internal_has_leveldb_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || leveldb_info_ != nullptr);
  return value;
}
inline bool ResConfigData::has_leveldb_info() const {
  return _internal_has_leveldb_info();
}
inline const ::resdb::LevelDBInfo& ResConfigData::_internal_leveldb_info() const {
  const ::resdb::LevelDBInfo* p = leveldb_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::resdb::LevelDBInfo&>(
      ::resdb::_LevelDBInfo_default_instance_);
}
inline const ::resdb::LevelDBInfo& ResConfigData::leveldb_info() const {
  // @@protoc_insertion_point(field_get:resdb.ResConfigData.leveldb_info)
  return _internal_leveldb_info();
}
inline void ResConfigData::unsafe_arena_set_allocated_leveldb_info(
    ::resdb::LevelDBInfo* leveldb_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leveldb_info_);
  }
  leveldb_info_ = leveldb_info;
  if (leveldb_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resdb.ResConfigData.leveldb_info)
}
inline ::resdb::LevelDBInfo* ResConfigData::release_leveldb_info() {
  _has_bits_[0] &= ~0x00000002u;
  ::resdb::LevelDBInfo* temp = leveldb_info_;
  leveldb_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resdb::LevelDBInfo* ResConfigData::unsafe_arena_release_leveldb_info() {
  // @@protoc_insertion_point(field_release:resdb.ResConfigData.leveldb_info)
  _has_bits_[0] &= ~0x00000002u;
  ::resdb::LevelDBInfo* temp = leveldb_info_;
  leveldb_info_ = nullptr;
  return temp;
}
inline ::resdb::LevelDBInfo* ResConfigData::_internal_mutable_leveldb_info() {
  _has_bits_[0] |= 0x00000002u;
  if (leveldb_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::resdb::LevelDBInfo>(GetArenaForAllocation());
    leveldb_info_ = p;
  }
  return leveldb_info_;
}
inline ::resdb::LevelDBInfo* ResConfigData::mutable_leveldb_info() {
  // @@protoc_insertion_point(field_mutable:resdb.ResConfigData.leveldb_info)
  return _internal_mutable_leveldb_info();
}
inline void ResConfigData::set_allocated_leveldb_info(::resdb::LevelDBInfo* leveldb_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(leveldb_info_);
  }
  if (leveldb_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leveldb_info));
    if (message_arena != submessage_arena) {
      leveldb_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leveldb_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leveldb_info_ = leveldb_info;
  // @@protoc_insertion_point(field_set_allocated:resdb.ResConfigData.leveldb_info)
}

// -------------------------------------------------------------------

// ReplicaStates

// repeated .resdb.ReplicaState state = 1;
inline int ReplicaStates::_internal_state_size() const {
  return state_.size();
}
inline int ReplicaStates::state_size() const {
  return _internal_state_size();
}
inline void ReplicaStates::clear_state() {
  state_.Clear();
}
inline ::resdb::ReplicaState* ReplicaStates::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:resdb.ReplicaStates.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaState >*
ReplicaStates::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:resdb.ReplicaStates.state)
  return &state_;
}
inline const ::resdb::ReplicaState& ReplicaStates::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::resdb::ReplicaState& ReplicaStates::state(int index) const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaStates.state)
  return _internal_state(index);
}
inline ::resdb::ReplicaState* ReplicaStates::_internal_add_state() {
  return state_.Add();
}
inline ::resdb::ReplicaState* ReplicaStates::add_state() {
  // @@protoc_insertion_point(field_add:resdb.ReplicaStates.state)
  return _internal_add_state();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::resdb::ReplicaState >&
ReplicaStates::state() const {
  // @@protoc_insertion_point(field_list:resdb.ReplicaStates.state)
  return state_;
}

// -------------------------------------------------------------------

// ReplicaState

// int64 view = 1;
inline void ReplicaState::clear_view() {
  view_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaState::_internal_view() const {
  return view_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReplicaState::view() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaState.view)
  return _internal_view();
}
inline void ReplicaState::_internal_set_view(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  view_ = value;
}
inline void ReplicaState::set_view(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_view(value);
  // @@protoc_insertion_point(field_set:resdb.ReplicaState.view)
}

// .resdb.ReplicaInfo replica_info = 2;
inline bool ReplicaState::_internal_has_replica_info() const {
  return this != internal_default_instance() && replica_info_ != nullptr;
}
inline bool ReplicaState::has_replica_info() const {
  return _internal_has_replica_info();
}
inline void ReplicaState::clear_replica_info() {
  if (GetArenaForAllocation() == nullptr && replica_info_ != nullptr) {
    delete replica_info_;
  }
  replica_info_ = nullptr;
}
inline const ::resdb::ReplicaInfo& ReplicaState::_internal_replica_info() const {
  const ::resdb::ReplicaInfo* p = replica_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::resdb::ReplicaInfo&>(
      ::resdb::_ReplicaInfo_default_instance_);
}
inline const ::resdb::ReplicaInfo& ReplicaState::replica_info() const {
  // @@protoc_insertion_point(field_get:resdb.ReplicaState.replica_info)
  return _internal_replica_info();
}
inline void ReplicaState::unsafe_arena_set_allocated_replica_info(
    ::resdb::ReplicaInfo* replica_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replica_info_);
  }
  replica_info_ = replica_info;
  if (replica_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:resdb.ReplicaState.replica_info)
}
inline ::resdb::ReplicaInfo* ReplicaState::release_replica_info() {
  
  ::resdb::ReplicaInfo* temp = replica_info_;
  replica_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::resdb::ReplicaInfo* ReplicaState::unsafe_arena_release_replica_info() {
  // @@protoc_insertion_point(field_release:resdb.ReplicaState.replica_info)
  
  ::resdb::ReplicaInfo* temp = replica_info_;
  replica_info_ = nullptr;
  return temp;
}
inline ::resdb::ReplicaInfo* ReplicaState::_internal_mutable_replica_info() {
  
  if (replica_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::resdb::ReplicaInfo>(GetArenaForAllocation());
    replica_info_ = p;
  }
  return replica_info_;
}
inline ::resdb::ReplicaInfo* ReplicaState::mutable_replica_info() {
  // @@protoc_insertion_point(field_mutable:resdb.ReplicaState.replica_info)
  return _internal_mutable_replica_info();
}
inline void ReplicaState::set_allocated_replica_info(::resdb::ReplicaInfo* replica_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete replica_info_;
  }
  if (replica_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::resdb::ReplicaInfo>::GetOwningArena(replica_info);
    if (message_arena != submessage_arena) {
      replica_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replica_info, submessage_arena);
    }
    
  } else {
    
  }
  replica_info_ = replica_info;
  // @@protoc_insertion_point(field_set_allocated:resdb.ReplicaState.replica_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resdb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2freplica_5finfo_2eproto
