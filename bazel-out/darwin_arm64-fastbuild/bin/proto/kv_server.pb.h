// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/kv_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fkv_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fkv_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fkv_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fkv_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fkv_5fserver_2eproto;
namespace resdb {
class KVRequest;
struct KVRequestDefaultTypeInternal;
extern KVRequestDefaultTypeInternal _KVRequest_default_instance_;
class KVResponse;
struct KVResponseDefaultTypeInternal;
extern KVResponseDefaultTypeInternal _KVResponse_default_instance_;
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> ::resdb::KVRequest* Arena::CreateMaybeMessage<::resdb::KVRequest>(Arena*);
template<> ::resdb::KVResponse* Arena::CreateMaybeMessage<::resdb::KVResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resdb {

enum KVRequest_CMD : int {
  KVRequest_CMD_NONE = 0,
  KVRequest_CMD_SET = 1,
  KVRequest_CMD_GET = 2,
  KVRequest_CMD_KVRequest_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  KVRequest_CMD_KVRequest_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool KVRequest_CMD_IsValid(int value);
constexpr KVRequest_CMD KVRequest_CMD_CMD_MIN = KVRequest_CMD_NONE;
constexpr KVRequest_CMD KVRequest_CMD_CMD_MAX = KVRequest_CMD_GET;
constexpr int KVRequest_CMD_CMD_ARRAYSIZE = KVRequest_CMD_CMD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* KVRequest_CMD_descriptor();
template<typename T>
inline const std::string& KVRequest_CMD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KVRequest_CMD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KVRequest_CMD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    KVRequest_CMD_descriptor(), enum_t_value);
}
inline bool KVRequest_CMD_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KVRequest_CMD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<KVRequest_CMD>(
    KVRequest_CMD_descriptor(), name, value);
}
// ===================================================================

class KVRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.KVRequest) */ {
 public:
  inline KVRequest() : KVRequest(nullptr) {}
  ~KVRequest() override;
  explicit constexpr KVRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVRequest(const KVRequest& from);
  KVRequest(KVRequest&& from) noexcept
    : KVRequest() {
    *this = ::std::move(from);
  }

  inline KVRequest& operator=(const KVRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVRequest& operator=(KVRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVRequest* internal_default_instance() {
    return reinterpret_cast<const KVRequest*>(
               &_KVRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KVRequest& a, KVRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(KVRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KVRequest* New() const final {
    return new KVRequest();
  }

  KVRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KVRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KVRequest& from);
  void MergeFrom(const KVRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.KVRequest";
  }
  protected:
  explicit KVRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef KVRequest_CMD CMD;
  static constexpr CMD NONE =
    KVRequest_CMD_NONE;
  static constexpr CMD SET =
    KVRequest_CMD_SET;
  static constexpr CMD GET =
    KVRequest_CMD_GET;
  static inline bool CMD_IsValid(int value) {
    return KVRequest_CMD_IsValid(value);
  }
  static constexpr CMD CMD_MIN =
    KVRequest_CMD_CMD_MIN;
  static constexpr CMD CMD_MAX =
    KVRequest_CMD_CMD_MAX;
  static constexpr int CMD_ARRAYSIZE =
    KVRequest_CMD_CMD_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CMD_descriptor() {
    return KVRequest_CMD_descriptor();
  }
  template<typename T>
  static inline const std::string& CMD_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CMD>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CMD_Name.");
    return KVRequest_CMD_Name(enum_t_value);
  }
  static inline bool CMD_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CMD* value) {
    return KVRequest_CMD_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kCmdFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 3;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .resdb.KVRequest.CMD cmd = 1;
  void clear_cmd();
  ::resdb::KVRequest_CMD cmd() const;
  void set_cmd(::resdb::KVRequest_CMD value);
  private:
  ::resdb::KVRequest_CMD _internal_cmd() const;
  void _internal_set_cmd(::resdb::KVRequest_CMD value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.KVRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkv_5fserver_2eproto;
};
// -------------------------------------------------------------------

class KVResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.KVResponse) */ {
 public:
  inline KVResponse() : KVResponse(nullptr) {}
  ~KVResponse() override;
  explicit constexpr KVResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KVResponse(const KVResponse& from);
  KVResponse(KVResponse&& from) noexcept
    : KVResponse() {
    *this = ::std::move(from);
  }

  inline KVResponse& operator=(const KVResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline KVResponse& operator=(KVResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KVResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const KVResponse* internal_default_instance() {
    return reinterpret_cast<const KVResponse*>(
               &_KVResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(KVResponse& a, KVResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(KVResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KVResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KVResponse* New() const final {
    return new KVResponse();
  }

  KVResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KVResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KVResponse& from);
  void MergeFrom(const KVResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KVResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.KVResponse";
  }
  protected:
  explicit KVResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes value = 2;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:resdb.KVResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fkv_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KVRequest

// .resdb.KVRequest.CMD cmd = 1;
inline void KVRequest::clear_cmd() {
  cmd_ = 0;
}
inline ::resdb::KVRequest_CMD KVRequest::_internal_cmd() const {
  return static_cast< ::resdb::KVRequest_CMD >(cmd_);
}
inline ::resdb::KVRequest_CMD KVRequest::cmd() const {
  // @@protoc_insertion_point(field_get:resdb.KVRequest.cmd)
  return _internal_cmd();
}
inline void KVRequest::_internal_set_cmd(::resdb::KVRequest_CMD value) {
  
  cmd_ = value;
}
inline void KVRequest::set_cmd(::resdb::KVRequest_CMD value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:resdb.KVRequest.cmd)
}

// string key = 2;
inline void KVRequest::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KVRequest::key() const {
  // @@protoc_insertion_point(field_get:resdb.KVRequest.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVRequest::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.KVRequest.key)
}
inline std::string* KVRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:resdb.KVRequest.key)
  return _internal_mutable_key();
}
inline const std::string& KVRequest::_internal_key() const {
  return key_.Get();
}
inline void KVRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KVRequest::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KVRequest::release_key() {
  // @@protoc_insertion_point(field_release:resdb.KVRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KVRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.KVRequest.key)
}

// bytes value = 3;
inline void KVRequest::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KVRequest::value() const {
  // @@protoc_insertion_point(field_get:resdb.KVRequest.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVRequest::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.KVRequest.value)
}
inline std::string* KVRequest::mutable_value() {
  // @@protoc_insertion_point(field_mutable:resdb.KVRequest.value)
  return _internal_mutable_value();
}
inline const std::string& KVRequest::_internal_value() const {
  return value_.Get();
}
inline void KVRequest::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KVRequest::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KVRequest::release_value() {
  // @@protoc_insertion_point(field_release:resdb.KVRequest.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KVRequest::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.KVRequest.value)
}

// -------------------------------------------------------------------

// KVResponse

// string key = 1;
inline void KVResponse::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KVResponse::key() const {
  // @@protoc_insertion_point(field_get:resdb.KVResponse.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVResponse::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.KVResponse.key)
}
inline std::string* KVResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:resdb.KVResponse.key)
  return _internal_mutable_key();
}
inline const std::string& KVResponse::_internal_key() const {
  return key_.Get();
}
inline void KVResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KVResponse::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KVResponse::release_key() {
  // @@protoc_insertion_point(field_release:resdb.KVResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KVResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.KVResponse.key)
}

// bytes value = 2;
inline void KVResponse::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KVResponse::value() const {
  // @@protoc_insertion_point(field_get:resdb.KVResponse.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KVResponse::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.KVResponse.value)
}
inline std::string* KVResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:resdb.KVResponse.value)
  return _internal_mutable_value();
}
inline const std::string& KVResponse::_internal_value() const {
  return value_.Get();
}
inline void KVResponse::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KVResponse::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KVResponse::release_value() {
  // @@protoc_insertion_point(field_release:resdb.KVResponse.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KVResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.KVResponse.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace resdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::resdb::KVRequest_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resdb::KVRequest_CMD>() {
  return ::resdb::KVRequest_CMD_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fkv_5fserver_2eproto
