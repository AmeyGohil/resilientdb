// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/durable.proto

#include "proto/durable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resdb {
constexpr RocksDBInfo::RocksDBInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_rocksdb_(false)
  , num_threads_(0u)
  , write_buffer_size_mb_(0u)
  , write_batch_size_(0u){}
struct RocksDBInfoDefaultTypeInternal {
  constexpr RocksDBInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RocksDBInfoDefaultTypeInternal() {}
  union {
    RocksDBInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RocksDBInfoDefaultTypeInternal _RocksDBInfo_default_instance_;
constexpr LevelDBInfo::LevelDBInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enable_leveldb_(false)
  , num_threads_(0u)
  , write_buffer_size_mb_(0u)
  , write_batch_size_(0u){}
struct LevelDBInfoDefaultTypeInternal {
  constexpr LevelDBInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LevelDBInfoDefaultTypeInternal() {}
  union {
    LevelDBInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LevelDBInfoDefaultTypeInternal _LevelDBInfo_default_instance_;
}  // namespace resdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdurable_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fdurable_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdurable_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdurable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, enable_rocksdb_),
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, num_threads_),
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, write_buffer_size_mb_),
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, write_batch_size_),
  PROTOBUF_FIELD_OFFSET(::resdb::RocksDBInfo, path_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, enable_leveldb_),
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, num_threads_),
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, write_buffer_size_mb_),
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, write_batch_size_),
  PROTOBUF_FIELD_OFFSET(::resdb::LevelDBInfo, path_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::resdb::RocksDBInfo)},
  { 15, 25, sizeof(::resdb::LevelDBInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RocksDBInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_LevelDBInfo_default_instance_),
};

const char descriptor_table_protodef_proto_2fdurable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023proto/durable.proto\022\005resdb\"\216\001\n\013RocksDB"
  "Info\022\026\n\016enable_rocksdb\030\001 \001(\010\022\023\n\013num_thre"
  "ads\030\002 \001(\r\022\034\n\024write_buffer_size_mb\030\003 \001(\r\022"
  "\030\n\020write_batch_size\030\004 \001(\r\022\021\n\004path\030\005 \001(\tH"
  "\000\210\001\001B\007\n\005_path\"\216\001\n\013LevelDBInfo\022\026\n\016enable_"
  "leveldb\030\001 \001(\010\022\023\n\013num_threads\030\002 \001(\r\022\034\n\024wr"
  "ite_buffer_size_mb\030\003 \001(\r\022\030\n\020write_batch_"
  "size\030\004 \001(\r\022\021\n\004path\030\005 \001(\tH\000\210\001\001B\007\n\005_pathb\006"
  "proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fdurable_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdurable_2eproto = {
  false, false, 326, descriptor_table_protodef_proto_2fdurable_2eproto, "proto/durable.proto", 
  &descriptor_table_proto_2fdurable_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_proto_2fdurable_2eproto::offsets,
  file_level_metadata_proto_2fdurable_2eproto, file_level_enum_descriptors_proto_2fdurable_2eproto, file_level_service_descriptors_proto_2fdurable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fdurable_2eproto_getter() {
  return &descriptor_table_proto_2fdurable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fdurable_2eproto(&descriptor_table_proto_2fdurable_2eproto);
namespace resdb {

// ===================================================================

class RocksDBInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<RocksDBInfo>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RocksDBInfo::RocksDBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RocksDBInfo)
}
RocksDBInfo::RocksDBInfo(const RocksDBInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_rocksdb_, &from.enable_rocksdb_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_batch_size_) -
    reinterpret_cast<char*>(&enable_rocksdb_)) + sizeof(write_batch_size_));
  // @@protoc_insertion_point(copy_constructor:resdb.RocksDBInfo)
}

void RocksDBInfo::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_rocksdb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_batch_size_) -
    reinterpret_cast<char*>(&enable_rocksdb_)) + sizeof(write_batch_size_));
}

RocksDBInfo::~RocksDBInfo() {
  // @@protoc_insertion_point(destructor:resdb.RocksDBInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RocksDBInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RocksDBInfo::ArenaDtor(void* object) {
  RocksDBInfo* _this = reinterpret_cast< RocksDBInfo* >(object);
  (void)_this;
}
void RocksDBInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RocksDBInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RocksDBInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RocksDBInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmpty();
  }
  ::memset(&enable_rocksdb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_batch_size_) -
      reinterpret_cast<char*>(&enable_rocksdb_)) + sizeof(write_batch_size_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RocksDBInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable_rocksdb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_rocksdb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_buffer_size_mb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          write_buffer_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "resdb.RocksDBInfo.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RocksDBInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RocksDBInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_rocksdb = 1;
  if (this->enable_rocksdb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_rocksdb(), target);
  }

  // uint32 num_threads = 2;
  if (this->num_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_threads(), target);
  }

  // uint32 write_buffer_size_mb = 3;
  if (this->write_buffer_size_mb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_write_buffer_size_mb(), target);
  }

  // uint32 write_batch_size = 4;
  if (this->write_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_write_batch_size(), target);
  }

  // optional string path = 5;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "resdb.RocksDBInfo.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RocksDBInfo)
  return target;
}

size_t RocksDBInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RocksDBInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string path = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool enable_rocksdb = 1;
  if (this->enable_rocksdb() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_threads = 2;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_threads());
  }

  // uint32 write_buffer_size_mb = 3;
  if (this->write_buffer_size_mb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_buffer_size_mb());
  }

  // uint32 write_batch_size = 4;
  if (this->write_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RocksDBInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RocksDBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RocksDBInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RocksDBInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RocksDBInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RocksDBInfo)
    MergeFrom(*source);
  }
}

void RocksDBInfo::MergeFrom(const RocksDBInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RocksDBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_set_path(from._internal_path());
  }
  if (from.enable_rocksdb() != 0) {
    _internal_set_enable_rocksdb(from._internal_enable_rocksdb());
  }
  if (from.num_threads() != 0) {
    _internal_set_num_threads(from._internal_num_threads());
  }
  if (from.write_buffer_size_mb() != 0) {
    _internal_set_write_buffer_size_mb(from._internal_write_buffer_size_mb());
  }
  if (from.write_batch_size() != 0) {
    _internal_set_write_batch_size(from._internal_write_batch_size());
  }
}

void RocksDBInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RocksDBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RocksDBInfo::CopyFrom(const RocksDBInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RocksDBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RocksDBInfo::IsInitialized() const {
  return true;
}

void RocksDBInfo::InternalSwap(RocksDBInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RocksDBInfo, write_batch_size_)
      + sizeof(RocksDBInfo::write_batch_size_)
      - PROTOBUF_FIELD_OFFSET(RocksDBInfo, enable_rocksdb_)>(
          reinterpret_cast<char*>(&enable_rocksdb_),
          reinterpret_cast<char*>(&other->enable_rocksdb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RocksDBInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fdurable_2eproto_getter, &descriptor_table_proto_2fdurable_2eproto_once,
      file_level_metadata_proto_2fdurable_2eproto[0]);
}

// ===================================================================

class LevelDBInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<LevelDBInfo>()._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LevelDBInfo::LevelDBInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.LevelDBInfo)
}
LevelDBInfo::LevelDBInfo(const LevelDBInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_path()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  ::memcpy(&enable_leveldb_, &from.enable_leveldb_,
    static_cast<size_t>(reinterpret_cast<char*>(&write_batch_size_) -
    reinterpret_cast<char*>(&enable_leveldb_)) + sizeof(write_batch_size_));
  // @@protoc_insertion_point(copy_constructor:resdb.LevelDBInfo)
}

void LevelDBInfo::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&enable_leveldb_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&write_batch_size_) -
    reinterpret_cast<char*>(&enable_leveldb_)) + sizeof(write_batch_size_));
}

LevelDBInfo::~LevelDBInfo() {
  // @@protoc_insertion_point(destructor:resdb.LevelDBInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LevelDBInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LevelDBInfo::ArenaDtor(void* object) {
  LevelDBInfo* _this = reinterpret_cast< LevelDBInfo* >(object);
  (void)_this;
}
void LevelDBInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LevelDBInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.LevelDBInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    path_.ClearNonDefaultToEmpty();
  }
  ::memset(&enable_leveldb_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&write_batch_size_) -
      reinterpret_cast<char*>(&enable_leveldb_)) + sizeof(write_batch_size_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LevelDBInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enable_leveldb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_leveldb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_threads = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_threads_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_buffer_size_mb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          write_buffer_size_mb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_batch_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string path = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "resdb.LevelDBInfo.path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LevelDBInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.LevelDBInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable_leveldb = 1;
  if (this->enable_leveldb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable_leveldb(), target);
  }

  // uint32 num_threads = 2;
  if (this->num_threads() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_threads(), target);
  }

  // uint32 write_buffer_size_mb = 3;
  if (this->write_buffer_size_mb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_write_buffer_size_mb(), target);
  }

  // uint32 write_batch_size = 4;
  if (this->write_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_write_batch_size(), target);
  }

  // optional string path = 5;
  if (_internal_has_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "resdb.LevelDBInfo.path");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.LevelDBInfo)
  return target;
}

size_t LevelDBInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.LevelDBInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string path = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool enable_leveldb = 1;
  if (this->enable_leveldb() != 0) {
    total_size += 1 + 1;
  }

  // uint32 num_threads = 2;
  if (this->num_threads() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_threads());
  }

  // uint32 write_buffer_size_mb = 3;
  if (this->write_buffer_size_mb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_buffer_size_mb());
  }

  // uint32 write_batch_size = 4;
  if (this->write_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_batch_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.LevelDBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const LevelDBInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LevelDBInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.LevelDBInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.LevelDBInfo)
    MergeFrom(*source);
  }
}

void LevelDBInfo::MergeFrom(const LevelDBInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.LevelDBInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_path()) {
    _internal_set_path(from._internal_path());
  }
  if (from.enable_leveldb() != 0) {
    _internal_set_enable_leveldb(from._internal_enable_leveldb());
  }
  if (from.num_threads() != 0) {
    _internal_set_num_threads(from._internal_num_threads());
  }
  if (from.write_buffer_size_mb() != 0) {
    _internal_set_write_buffer_size_mb(from._internal_write_buffer_size_mb());
  }
  if (from.write_batch_size() != 0) {
    _internal_set_write_batch_size(from._internal_write_batch_size());
  }
}

void LevelDBInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.LevelDBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelDBInfo::CopyFrom(const LevelDBInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.LevelDBInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBInfo::IsInitialized() const {
  return true;
}

void LevelDBInfo::InternalSwap(LevelDBInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, GetArenaForAllocation(),
      &other->path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LevelDBInfo, write_batch_size_)
      + sizeof(LevelDBInfo::write_batch_size_)
      - PROTOBUF_FIELD_OFFSET(LevelDBInfo, enable_leveldb_)>(
          reinterpret_cast<char*>(&enable_leveldb_),
          reinterpret_cast<char*>(&other->enable_leveldb_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LevelDBInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fdurable_2eproto_getter, &descriptor_table_proto_2fdurable_2eproto_once,
      file_level_metadata_proto_2fdurable_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resdb::RocksDBInfo* Arena::CreateMaybeMessage< ::resdb::RocksDBInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RocksDBInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::LevelDBInfo* Arena::CreateMaybeMessage< ::resdb::LevelDBInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::LevelDBInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
