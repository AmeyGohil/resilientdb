// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2flogging_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2flogging_2eproto;
namespace resdb {
class LoggingInfo;
struct LoggingInfoDefaultTypeInternal;
extern LoggingInfoDefaultTypeInternal _LoggingInfo_default_instance_;
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> ::resdb::LoggingInfo* Arena::CreateMaybeMessage<::resdb::LoggingInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace resdb {

enum LoggingInfo_Type : int {
  LoggingInfo_Type_NONE = 0,
  LoggingInfo_Type_ASSIGN = 1,
  LoggingInfo_Type_ADD = 2,
  LoggingInfo_Type_FETCH = 3,
  LoggingInfo_Type_COMMIT = 4,
  LoggingInfo_Type_CLEAR = 5,
  LoggingInfo_Type_LoggingInfo_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoggingInfo_Type_LoggingInfo_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoggingInfo_Type_IsValid(int value);
constexpr LoggingInfo_Type LoggingInfo_Type_Type_MIN = LoggingInfo_Type_NONE;
constexpr LoggingInfo_Type LoggingInfo_Type_Type_MAX = LoggingInfo_Type_CLEAR;
constexpr int LoggingInfo_Type_Type_ARRAYSIZE = LoggingInfo_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingInfo_Type_descriptor();
template<typename T>
inline const std::string& LoggingInfo_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoggingInfo_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoggingInfo_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoggingInfo_Type_descriptor(), enum_t_value);
}
inline bool LoggingInfo_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LoggingInfo_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoggingInfo_Type>(
    LoggingInfo_Type_descriptor(), name, value);
}
// ===================================================================

class LoggingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:resdb.LoggingInfo) */ {
 public:
  inline LoggingInfo() : LoggingInfo(nullptr) {}
  ~LoggingInfo() override;
  explicit constexpr LoggingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoggingInfo(const LoggingInfo& from);
  LoggingInfo(LoggingInfo&& from) noexcept
    : LoggingInfo() {
    *this = ::std::move(from);
  }

  inline LoggingInfo& operator=(const LoggingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingInfo& operator=(LoggingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoggingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoggingInfo* internal_default_instance() {
    return reinterpret_cast<const LoggingInfo*>(
               &_LoggingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoggingInfo& a, LoggingInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggingInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoggingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggingInfo* New() const final {
    return new LoggingInfo();
  }

  LoggingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggingInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggingInfo& from);
  void MergeFrom(const LoggingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggingInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "resdb.LoggingInfo";
  }
  protected:
  explicit LoggingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoggingInfo_Type Type;
  static constexpr Type NONE =
    LoggingInfo_Type_NONE;
  static constexpr Type ASSIGN =
    LoggingInfo_Type_ASSIGN;
  static constexpr Type ADD =
    LoggingInfo_Type_ADD;
  static constexpr Type FETCH =
    LoggingInfo_Type_FETCH;
  static constexpr Type COMMIT =
    LoggingInfo_Type_COMMIT;
  static constexpr Type CLEAR =
    LoggingInfo_Type_CLEAR;
  static inline bool Type_IsValid(int value) {
    return LoggingInfo_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LoggingInfo_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LoggingInfo_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LoggingInfo_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LoggingInfo_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LoggingInfo_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return LoggingInfo_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 3,
    kSignatureFieldNumber = 4,
    kSeqFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // bytes request = 3;
  void clear_request();
  const std::string& request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_request();
  void set_allocated_request(std::string* request);
  private:
  const std::string& _internal_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request(const std::string& value);
  std::string* _internal_mutable_request();
  public:

  // bytes signature = 4;
  void clear_signature();
  const std::string& signature() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_signature(ArgT0&& arg0, ArgT... args);
  std::string* mutable_signature();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // int64 seq = 2;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int64 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .resdb.LoggingInfo.Type type = 1;
  void clear_type();
  ::resdb::LoggingInfo_Type type() const;
  void set_type(::resdb::LoggingInfo_Type value);
  private:
  ::resdb::LoggingInfo_Type _internal_type() const;
  void _internal_set_type(::resdb::LoggingInfo_Type value);
  public:

  // @@protoc_insertion_point(class_scope:resdb.LoggingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int64 seq_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoggingInfo

// .resdb.LoggingInfo.Type type = 1;
inline void LoggingInfo::clear_type() {
  type_ = 0;
}
inline ::resdb::LoggingInfo_Type LoggingInfo::_internal_type() const {
  return static_cast< ::resdb::LoggingInfo_Type >(type_);
}
inline ::resdb::LoggingInfo_Type LoggingInfo::type() const {
  // @@protoc_insertion_point(field_get:resdb.LoggingInfo.type)
  return _internal_type();
}
inline void LoggingInfo::_internal_set_type(::resdb::LoggingInfo_Type value) {
  
  type_ = value;
}
inline void LoggingInfo::set_type(::resdb::LoggingInfo_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:resdb.LoggingInfo.type)
}

// int64 seq = 2;
inline void LoggingInfo::clear_seq() {
  seq_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoggingInfo::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LoggingInfo::seq() const {
  // @@protoc_insertion_point(field_get:resdb.LoggingInfo.seq)
  return _internal_seq();
}
inline void LoggingInfo::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seq_ = value;
}
inline void LoggingInfo::set_seq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:resdb.LoggingInfo.seq)
}

// bytes request = 3;
inline void LoggingInfo::clear_request() {
  request_.ClearToEmpty();
}
inline const std::string& LoggingInfo::request() const {
  // @@protoc_insertion_point(field_get:resdb.LoggingInfo.request)
  return _internal_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingInfo::set_request(ArgT0&& arg0, ArgT... args) {
 
 request_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.LoggingInfo.request)
}
inline std::string* LoggingInfo::mutable_request() {
  // @@protoc_insertion_point(field_mutable:resdb.LoggingInfo.request)
  return _internal_mutable_request();
}
inline const std::string& LoggingInfo::_internal_request() const {
  return request_.Get();
}
inline void LoggingInfo::_internal_set_request(const std::string& value) {
  
  request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoggingInfo::_internal_mutable_request() {
  
  return request_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoggingInfo::release_request() {
  // @@protoc_insertion_point(field_release:resdb.LoggingInfo.request)
  return request_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoggingInfo::set_allocated_request(std::string* request) {
  if (request != nullptr) {
    
  } else {
    
  }
  request_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.LoggingInfo.request)
}

// bytes signature = 4;
inline void LoggingInfo::clear_signature() {
  signature_.ClearToEmpty();
}
inline const std::string& LoggingInfo::signature() const {
  // @@protoc_insertion_point(field_get:resdb.LoggingInfo.signature)
  return _internal_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoggingInfo::set_signature(ArgT0&& arg0, ArgT... args) {
 
 signature_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:resdb.LoggingInfo.signature)
}
inline std::string* LoggingInfo::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:resdb.LoggingInfo.signature)
  return _internal_mutable_signature();
}
inline const std::string& LoggingInfo::_internal_signature() const {
  return signature_.Get();
}
inline void LoggingInfo::_internal_set_signature(const std::string& value) {
  
  signature_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoggingInfo::_internal_mutable_signature() {
  
  return signature_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoggingInfo::release_signature() {
  // @@protoc_insertion_point(field_release:resdb.LoggingInfo.signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void LoggingInfo::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:resdb.LoggingInfo.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace resdb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::resdb::LoggingInfo_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::resdb::LoggingInfo_Type>() {
  return ::resdb::LoggingInfo_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2flogging_2eproto
