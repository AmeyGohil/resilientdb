// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/resdb.proto

#include "proto/resdb.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace resdb {
constexpr ResDBMessage::ResDBMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(nullptr){}
struct ResDBMessageDefaultTypeInternal {
  constexpr ResDBMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResDBMessageDefaultTypeInternal() {}
  union {
    ResDBMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResDBMessageDefaultTypeInternal _ResDBMessage_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hash_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , client_info_(nullptr)
  , data_signature_(nullptr)
  , region_info_(nullptr)
  , current_view_(uint64_t{0u})
  , type_(0)
  , sender_id_(0)
  , seq_(uint64_t{0u})
  , proxy_id_(int64_t{0})
  , current_executed_seq_(uint64_t{0u})
  , is_system_request_(false)
  , need_response_(false)
  , ret_(0){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr ResponseData::ResponseData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , signature_(nullptr){}
struct ResponseDataDefaultTypeInternal {
  constexpr ResponseDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDataDefaultTypeInternal() {}
  union {
    ResponseData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDataDefaultTypeInternal _ResponseData_default_instance_;
constexpr Response::Response(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resp_()
  , result_(0)
{}
struct ResponseDefaultTypeInternal {
  constexpr ResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseDefaultTypeInternal _Response_default_instance_;
constexpr BatchClientRequest_ClientRequest::BatchClientRequest_ClientRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(nullptr)
  , signature_(nullptr)
  , id_(0){}
struct BatchClientRequest_ClientRequestDefaultTypeInternal {
  constexpr BatchClientRequest_ClientRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchClientRequest_ClientRequestDefaultTypeInternal() {}
  union {
    BatchClientRequest_ClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchClientRequest_ClientRequestDefaultTypeInternal _BatchClientRequest_ClientRequest_default_instance_;
constexpr BatchClientRequest::BatchClientRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : client_requests_()
  , createtime_(uint64_t{0u})
  , local_id_(uint64_t{0u}){}
struct BatchClientRequestDefaultTypeInternal {
  constexpr BatchClientRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchClientRequestDefaultTypeInternal() {}
  union {
    BatchClientRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchClientRequestDefaultTypeInternal _BatchClientRequest_default_instance_;
constexpr BatchClientResponse::BatchClientResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : response_()
  , signatures_()
  , seq_(uint64_t{0u})
  , current_view_(uint64_t{0u})
  , createtime_(uint64_t{0u})
  , local_id_(uint64_t{0u})
  , proxy_id_(0){}
struct BatchClientResponseDefaultTypeInternal {
  constexpr BatchClientResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatchClientResponseDefaultTypeInternal() {}
  union {
    BatchClientResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatchClientResponseDefaultTypeInternal _BatchClientResponse_default_instance_;
constexpr HeartBeatInfo::HeartBeatInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_keys_(){}
struct HeartBeatInfoDefaultTypeInternal {
  constexpr HeartBeatInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeartBeatInfoDefaultTypeInternal() {}
  union {
    HeartBeatInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeartBeatInfoDefaultTypeInternal _HeartBeatInfo_default_instance_;
constexpr ClientCertInfo::ClientCertInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_key_(nullptr)
  , client_info_(nullptr){}
struct ClientCertInfoDefaultTypeInternal {
  constexpr ClientCertInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCertInfoDefaultTypeInternal() {}
  union {
    ClientCertInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCertInfoDefaultTypeInternal _ClientCertInfo_default_instance_;
constexpr ClientCertResponse::ClientCertResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : public_keys_()
  , replicas_(){}
struct ClientCertResponseDefaultTypeInternal {
  constexpr ClientCertResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ClientCertResponseDefaultTypeInternal() {}
  union {
    ClientCertResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ClientCertResponseDefaultTypeInternal _ClientCertResponse_default_instance_;
constexpr NewReplicaRequest::NewReplicaRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : replica_info_(nullptr){}
struct NewReplicaRequestDefaultTypeInternal {
  constexpr NewReplicaRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NewReplicaRequestDefaultTypeInternal() {}
  union {
    NewReplicaRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NewReplicaRequestDefaultTypeInternal _NewReplicaRequest_default_instance_;
constexpr SystemInfoRequest::SystemInfoRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct SystemInfoRequestDefaultTypeInternal {
  constexpr SystemInfoRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SystemInfoRequestDefaultTypeInternal() {}
  union {
    SystemInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SystemInfoRequestDefaultTypeInternal _SystemInfoRequest_default_instance_;
constexpr RecoveryRequest::RecoveryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_seq_(uint64_t{0u})
  , max_seq_(uint64_t{0u}){}
struct RecoveryRequestDefaultTypeInternal {
  constexpr RecoveryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecoveryRequestDefaultTypeInternal() {}
  union {
    RecoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecoveryRequestDefaultTypeInternal _RecoveryRequest_default_instance_;
constexpr RecoveryResponse::RecoveryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(){}
struct RecoveryResponseDefaultTypeInternal {
  constexpr RecoveryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecoveryResponseDefaultTypeInternal() {}
  union {
    RecoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecoveryResponseDefaultTypeInternal _RecoveryResponse_default_instance_;
constexpr RequestWithProof_RequestData::RequestWithProof_RequestData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_(nullptr)
  , signature_(nullptr){}
struct RequestWithProof_RequestDataDefaultTypeInternal {
  constexpr RequestWithProof_RequestDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestWithProof_RequestDataDefaultTypeInternal() {}
  union {
    RequestWithProof_RequestData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestWithProof_RequestDataDefaultTypeInternal _RequestWithProof_RequestData_default_instance_;
constexpr RequestWithProof::RequestWithProof(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proofs_()
  , request_(nullptr)
  , seq_(uint64_t{0u}){}
struct RequestWithProofDefaultTypeInternal {
  constexpr RequestWithProofDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestWithProofDefaultTypeInternal() {}
  union {
    RequestWithProof _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestWithProofDefaultTypeInternal _RequestWithProof_default_instance_;
constexpr RequestSet::RequestSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : requests_(){}
struct RequestSetDefaultTypeInternal {
  constexpr RequestSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestSetDefaultTypeInternal() {}
  union {
    RequestSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestSetDefaultTypeInternal _RequestSet_default_instance_;
constexpr QueryRequest::QueryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_seq_(uint64_t{0u})
  , max_seq_(uint64_t{0u}){}
struct QueryRequestDefaultTypeInternal {
  constexpr QueryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryRequestDefaultTypeInternal() {}
  union {
    QueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
constexpr QueryResponse::QueryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transactions_(){}
struct QueryResponseDefaultTypeInternal {
  constexpr QueryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QueryResponseDefaultTypeInternal() {}
  union {
    QueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
}  // namespace resdb
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fresdb_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_proto_2fresdb_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fresdb_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fresdb_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ResDBMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ResDBMessage, data_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResDBMessage, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::Request, type_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, data_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, client_info_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, current_view_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, hash_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, sender_id_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, proxy_id_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, is_system_request_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, current_executed_seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, need_response_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, ret_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, data_signature_),
  PROTOBUF_FIELD_OFFSET(::resdb::Request, region_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ResponseData, data_),
  PROTOBUF_FIELD_OFFSET(::resdb::ResponseData, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::Response, result_),
  PROTOBUF_FIELD_OFFSET(::resdb::Response, resp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest_ClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest_ClientRequest, request_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest_ClientRequest, signature_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest_ClientRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest, client_requests_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest, createtime_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientRequest, local_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, response_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, signatures_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, proxy_id_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, current_view_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, createtime_),
  PROTOBUF_FIELD_OFFSET(::resdb::BatchClientResponse, local_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::HeartBeatInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::HeartBeatInfo, public_keys_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertInfo, public_key_),
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertInfo, client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertResponse, public_keys_),
  PROTOBUF_FIELD_OFFSET(::resdb::ClientCertResponse, replicas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::NewReplicaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::NewReplicaRequest, replica_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::SystemInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::SystemInfoRequest, type_),
  PROTOBUF_FIELD_OFFSET(::resdb::SystemInfoRequest, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RecoveryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RecoveryRequest, min_seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::RecoveryRequest, max_seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RecoveryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RecoveryResponse, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof_RequestData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof_RequestData, request_),
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof_RequestData, signature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof, request_),
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof, proofs_),
  PROTOBUF_FIELD_OFFSET(::resdb::RequestWithProof, seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::RequestSet, requests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::QueryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::QueryRequest, min_seq_),
  PROTOBUF_FIELD_OFFSET(::resdb::QueryRequest, max_seq_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::resdb::QueryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::resdb::QueryResponse, transactions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::resdb::ResDBMessage)},
  { 7, -1, sizeof(::resdb::Request)},
  { 26, -1, sizeof(::resdb::ResponseData)},
  { 33, -1, sizeof(::resdb::Response)},
  { 40, -1, sizeof(::resdb::BatchClientRequest_ClientRequest)},
  { 48, -1, sizeof(::resdb::BatchClientRequest)},
  { 56, -1, sizeof(::resdb::BatchClientResponse)},
  { 68, -1, sizeof(::resdb::HeartBeatInfo)},
  { 74, -1, sizeof(::resdb::ClientCertInfo)},
  { 81, -1, sizeof(::resdb::ClientCertResponse)},
  { 88, -1, sizeof(::resdb::NewReplicaRequest)},
  { 94, -1, sizeof(::resdb::SystemInfoRequest)},
  { 101, -1, sizeof(::resdb::RecoveryRequest)},
  { 108, -1, sizeof(::resdb::RecoveryResponse)},
  { 114, -1, sizeof(::resdb::RequestWithProof_RequestData)},
  { 121, -1, sizeof(::resdb::RequestWithProof)},
  { 129, -1, sizeof(::resdb::RequestSet)},
  { 135, -1, sizeof(::resdb::QueryRequest)},
  { 142, -1, sizeof(::resdb::QueryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ResDBMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ResponseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_BatchClientRequest_ClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_BatchClientRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_BatchClientResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_HeartBeatInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ClientCertInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_ClientCertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_NewReplicaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_SystemInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RecoveryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RecoveryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RequestWithProof_RequestData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RequestWithProof_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_RequestSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_QueryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::resdb::_QueryResponse_default_instance_),
};

const char descriptor_table_protodef_proto_2fresdb_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021proto/resdb.proto\022\005resdb\032\030proto/replic"
  "a_info.proto\032\032proto/signature_info.proto"
  "\"E\n\014ResDBMessage\022\014\n\004data\030\001 \001(\014\022\'\n\tsignat"
  "ure\030\002 \001(\0132\024.resdb.SignatureInfo\"\253\005\n\007Requ"
  "est\022\014\n\004type\030\001 \001(\005\022\014\n\004data\030\002 \001(\014\022\'\n\013clien"
  "t_info\030\003 \001(\0132\022.resdb.ReplicaInfo\022\024\n\014curr"
  "ent_view\030\004 \001(\004\022\013\n\003seq\030\005 \001(\004\022\014\n\004hash\030\006 \001("
  "\014\022\021\n\tsender_id\030\007 \001(\005\022\020\n\010proxy_id\030\010 \001(\003\022\031"
  "\n\021is_system_request\030\t \001(\010\022\034\n\024current_exe"
  "cuted_seq\030\n \001(\004\022\025\n\rneed_response\030\013 \001(\010\022\013"
  "\n\003ret\030\014 \001(\005\022,\n\016data_signature\030\r \001(\0132\024.re"
  "sdb.SignatureInfo\022&\n\013region_info\030\016 \001(\0132\021"
  ".resdb.RegionInfo\"\321\002\n\004Type\022\r\n\tTYPE_NONE\020"
  "\000\022\023\n\017TYPE_HEART_BEAT\020\001\022\027\n\023TYPE_CLIENT_RE"
  "QUEST\020\002\022\024\n\020TYPE_PRE_PREPARE\020\003\022\020\n\014TYPE_PR"
  "EPARE\020\004\022\017\n\013TYPE_COMMIT\020\005\022\024\n\020TYPE_CLIENT_"
  "CERT\020\006\022\021\n\rTYPE_RESPONSE\020\007\022\026\n\022TYPE_RECOVE"
  "RY_DATA\020\010\022\033\n\027TYPE_RECOVERY_DATA_RESP\020\t\022\023"
  "\n\017TYPE_CHECKPOINT\020\n\022\016\n\nTYPE_QUERY\020\013\022\026\n\022T"
  "YPE_REPLICA_STATE\020\014\022\021\n\rTYPE_NEW_TXNS\020\016\022\024"
  "\n\020TYPE_GEO_REQUEST\020\017\022\017\n\013NUM_OF_TYPE\020\020\"E\n"
  "\014ResponseData\022\014\n\004data\030\001 \001(\014\022\'\n\tsignature"
  "\030\002 \001(\0132\024.resdb.SignatureInfo\"{\n\010Response"
  "\022&\n\006result\030\001 \001(\0162\026.resdb.Response.Result"
  "\022!\n\004resp\030\002 \003(\0132\023.resdb.ResponseData\"$\n\006R"
  "esult\022\006\n\002OK\020\000\022\022\n\005ERROR\020\377\377\377\377\377\377\377\377\377\001\"\343\001\n\022Ba"
  "tchClientRequest\022@\n\017client_requests\030\001 \003("
  "\0132\'.resdb.BatchClientRequest.ClientReque"
  "st\022\022\n\ncreatetime\030\002 \001(\004\022\020\n\010local_id\030\003 \001(\004"
  "\032e\n\rClientRequest\022\037\n\007request\030\001 \001(\0132\016.res"
  "db.Request\022\'\n\tsignature\030\002 \001(\0132\024.resdb.Si"
  "gnatureInfo\022\n\n\002id\030\003 \001(\005\"\254\001\n\023BatchClientR"
  "esponse\022\020\n\010response\030\001 \003(\014\022(\n\nsignatures\030"
  "\002 \003(\0132\024.resdb.SignatureInfo\022\020\n\010proxy_id\030"
  "\003 \001(\005\022\013\n\003seq\030\004 \001(\004\022\024\n\014current_view\030\005 \001(\004"
  "\022\022\n\ncreatetime\030\006 \001(\004\022\020\n\010local_id\030\007 \001(\004\";"
  "\n\rHeartBeatInfo\022*\n\013public_keys\030\001 \003(\0132\025.r"
  "esdb.CertificateKey\"d\n\016ClientCertInfo\022)\n"
  "\npublic_key\030\001 \001(\0132\025.resdb.CertificateKey"
  "\022\'\n\013client_info\030\002 \001(\0132\022.resdb.ReplicaInf"
  "o\"f\n\022ClientCertResponse\022*\n\013public_keys\030\001"
  " \003(\0132\025.resdb.CertificateKey\022$\n\010replicas\030"
  "\002 \003(\0132\022.resdb.ReplicaInfo\"=\n\021NewReplicaR"
  "equest\022(\n\014replica_info\030\001 \001(\0132\022.resdb.Rep"
  "licaInfo\"t\n\021SystemInfoRequest\022+\n\004type\030\001 "
  "\001(\0162\035.resdb.SystemInfoRequest.Type\022\017\n\007re"
  "quest\030\002 \001(\014\"!\n\004Type\022\010\n\004NONE\020\000\022\017\n\013ADD_REP"
  "LICA\020\001\"3\n\017RecoveryRequest\022\017\n\007min_seq\030\001 \001"
  "(\004\022\017\n\007max_seq\030\002 \001(\004\"3\n\020RecoveryResponse\022"
  "\037\n\007request\030\001 \003(\0132\016.resdb.Request\"\316\001\n\020Req"
  "uestWithProof\022\037\n\007request\030\001 \001(\0132\016.resdb.R"
  "equest\0223\n\006proofs\030\002 \003(\0132#.resdb.RequestWi"
  "thProof.RequestData\022\013\n\003seq\030\003 \001(\004\032W\n\013Requ"
  "estData\022\037\n\007request\030\001 \001(\0132\016.resdb.Request"
  "\022\'\n\tsignature\030\002 \001(\0132\024.resdb.SignatureInf"
  "o\"7\n\nRequestSet\022)\n\010requests\030\001 \003(\0132\027.resd"
  "b.RequestWithProof\"0\n\014QueryRequest\022\017\n\007mi"
  "n_seq\030\001 \001(\004\022\017\n\007max_seq\030\002 \001(\004\"5\n\rQueryRes"
  "ponse\022$\n\014transactions\030\001 \003(\0132\016.resdb.Requ"
  "estb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fresdb_2eproto_deps[2] = {
  &::descriptor_table_proto_2freplica_5finfo_2eproto,
  &::descriptor_table_proto_2fsignature_5finfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fresdb_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fresdb_2eproto = {
  false, false, 2371, descriptor_table_protodef_proto_2fresdb_2eproto, "proto/resdb.proto", 
  &descriptor_table_proto_2fresdb_2eproto_once, descriptor_table_proto_2fresdb_2eproto_deps, 2, 19,
  schemas, file_default_instances, TableStruct_proto_2fresdb_2eproto::offsets,
  file_level_metadata_proto_2fresdb_2eproto, file_level_enum_descriptors_proto_2fresdb_2eproto, file_level_service_descriptors_proto_2fresdb_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_proto_2fresdb_2eproto_getter() {
  return &descriptor_table_proto_2fresdb_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_proto_2fresdb_2eproto(&descriptor_table_proto_2fresdb_2eproto);
namespace resdb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fresdb_2eproto);
  return file_level_enum_descriptors_proto_2fresdb_2eproto[0];
}
bool Request_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Request_Type Request::TYPE_NONE;
constexpr Request_Type Request::TYPE_HEART_BEAT;
constexpr Request_Type Request::TYPE_CLIENT_REQUEST;
constexpr Request_Type Request::TYPE_PRE_PREPARE;
constexpr Request_Type Request::TYPE_PREPARE;
constexpr Request_Type Request::TYPE_COMMIT;
constexpr Request_Type Request::TYPE_CLIENT_CERT;
constexpr Request_Type Request::TYPE_RESPONSE;
constexpr Request_Type Request::TYPE_RECOVERY_DATA;
constexpr Request_Type Request::TYPE_RECOVERY_DATA_RESP;
constexpr Request_Type Request::TYPE_CHECKPOINT;
constexpr Request_Type Request::TYPE_QUERY;
constexpr Request_Type Request::TYPE_REPLICA_STATE;
constexpr Request_Type Request::TYPE_NEW_TXNS;
constexpr Request_Type Request::TYPE_GEO_REQUEST;
constexpr Request_Type Request::NUM_OF_TYPE;
constexpr Request_Type Request::Type_MIN;
constexpr Request_Type Request::Type_MAX;
constexpr int Request::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fresdb_2eproto);
  return file_level_enum_descriptors_proto_2fresdb_2eproto[1];
}
bool Response_Result_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Response_Result Response::OK;
constexpr Response_Result Response::ERROR;
constexpr Response_Result Response::Result_MIN;
constexpr Response_Result Response::Result_MAX;
constexpr int Response::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SystemInfoRequest_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_proto_2fresdb_2eproto);
  return file_level_enum_descriptors_proto_2fresdb_2eproto[2];
}
bool SystemInfoRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr SystemInfoRequest_Type SystemInfoRequest::NONE;
constexpr SystemInfoRequest_Type SystemInfoRequest::ADD_REPLICA;
constexpr SystemInfoRequest_Type SystemInfoRequest::Type_MIN;
constexpr SystemInfoRequest_Type SystemInfoRequest::Type_MAX;
constexpr int SystemInfoRequest::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ResDBMessage::_Internal {
 public:
  static const ::resdb::SignatureInfo& signature(const ResDBMessage* msg);
};

const ::resdb::SignatureInfo&
ResDBMessage::_Internal::signature(const ResDBMessage* msg) {
  return *msg->signature_;
}
void ResDBMessage::clear_signature() {
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
ResDBMessage::ResDBMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ResDBMessage)
}
ResDBMessage::ResDBMessage(const ResDBMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::resdb::SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:resdb.ResDBMessage)
}

void ResDBMessage::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_ = nullptr;
}

ResDBMessage::~ResDBMessage() {
  // @@protoc_insertion_point(destructor:resdb.ResDBMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResDBMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void ResDBMessage::ArenaDtor(void* object) {
  ResDBMessage* _this = reinterpret_cast< ResDBMessage* >(object);
  (void)_this;
}
void ResDBMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResDBMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResDBMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ResDBMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResDBMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResDBMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ResDBMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ResDBMessage)
  return target;
}

size_t ResDBMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ResDBMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResDBMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ResDBMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ResDBMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResDBMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ResDBMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ResDBMessage)
    MergeFrom(*source);
  }
}

void ResDBMessage::MergeFrom(const ResDBMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ResDBMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::resdb::SignatureInfo::MergeFrom(from._internal_signature());
  }
}

void ResDBMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ResDBMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResDBMessage::CopyFrom(const ResDBMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ResDBMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResDBMessage::IsInitialized() const {
  return true;
}

void ResDBMessage::InternalSwap(ResDBMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResDBMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[0]);
}

// ===================================================================

class Request::_Internal {
 public:
  static const ::resdb::ReplicaInfo& client_info(const Request* msg);
  static const ::resdb::SignatureInfo& data_signature(const Request* msg);
  static const ::resdb::RegionInfo& region_info(const Request* msg);
};

const ::resdb::ReplicaInfo&
Request::_Internal::client_info(const Request* msg) {
  return *msg->client_info_;
}
const ::resdb::SignatureInfo&
Request::_Internal::data_signature(const Request* msg) {
  return *msg->data_signature_;
}
const ::resdb::RegionInfo&
Request::_Internal::region_info(const Request* msg) {
  return *msg->region_info_;
}
void Request::clear_client_info() {
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
void Request::clear_data_signature() {
  if (GetArenaForAllocation() == nullptr && data_signature_ != nullptr) {
    delete data_signature_;
  }
  data_signature_ = nullptr;
}
void Request::clear_region_info() {
  if (GetArenaForAllocation() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hash(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::resdb::ReplicaInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  if (from._internal_has_data_signature()) {
    data_signature_ = new ::resdb::SignatureInfo(*from.data_signature_);
  } else {
    data_signature_ = nullptr;
  }
  if (from._internal_has_region_info()) {
    region_info_ = new ::resdb::RegionInfo(*from.region_info_);
  } else {
    region_info_ = nullptr;
  }
  ::memcpy(&current_view_, &from.current_view_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&current_view_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:resdb.Request)
}

void Request::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&client_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&client_info_)) + sizeof(ret_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:resdb.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete client_info_;
  if (this != internal_default_instance()) delete data_signature_;
  if (this != internal_default_instance()) delete region_info_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  hash_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && data_signature_ != nullptr) {
    delete data_signature_;
  }
  data_signature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && region_info_ != nullptr) {
    delete region_info_;
  }
  region_info_ = nullptr;
  ::memset(&current_view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&current_view_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.ReplicaInfo client_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_view = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          current_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 sender_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 proxy_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          proxy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_system_request = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_system_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_executed_seq = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          current_executed_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool need_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          need_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ret = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.SignatureInfo data_signature = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.RegionInfo region_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // bytes data = 2;
  if (!this->data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .resdb.ReplicaInfo client_info = 3;
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client_info(this), target, stream);
  }

  // uint64 current_view = 4;
  if (this->current_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_current_view(), target);
  }

  // uint64 seq = 5;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_seq(), target);
  }

  // bytes hash = 6;
  if (!this->hash().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_hash(), target);
  }

  // int32 sender_id = 7;
  if (this->sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_sender_id(), target);
  }

  // int64 proxy_id = 8;
  if (this->proxy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(8, this->_internal_proxy_id(), target);
  }

  // bool is_system_request = 9;
  if (this->is_system_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_system_request(), target);
  }

  // uint64 current_executed_seq = 10;
  if (this->current_executed_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_current_executed_seq(), target);
  }

  // bool need_response = 11;
  if (this->need_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_need_response(), target);
  }

  // int32 ret = 12;
  if (this->ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_ret(), target);
  }

  // .resdb.SignatureInfo data_signature = 13;
  if (this->has_data_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::data_signature(this), target, stream);
  }

  // .resdb.RegionInfo region_info = 14;
  if (this->has_region_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::region_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // bytes hash = 6;
  if (!this->hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .resdb.ReplicaInfo client_info = 3;
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // .resdb.SignatureInfo data_signature = 13;
  if (this->has_data_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_signature_);
  }

  // .resdb.RegionInfo region_info = 14;
  if (this->has_region_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_info_);
  }

  // uint64 current_view = 4;
  if (this->current_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_view());
  }

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 sender_id = 7;
  if (this->sender_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sender_id());
  }

  // uint64 seq = 5;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // int64 proxy_id = 8;
  if (this->proxy_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_proxy_id());
  }

  // uint64 current_executed_seq = 10;
  if (this->current_executed_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_executed_seq());
  }

  // bool is_system_request = 9;
  if (this->is_system_request() != 0) {
    total_size += 1 + 1;
  }

  // bool need_response = 11;
  if (this->need_response() != 0) {
    total_size += 1 + 1;
  }

  // int32 ret = 12;
  if (this->ret() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (!from.hash().empty()) {
    _internal_set_hash(from._internal_hash());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::resdb::ReplicaInfo::MergeFrom(from._internal_client_info());
  }
  if (from.has_data_signature()) {
    _internal_mutable_data_signature()->::resdb::SignatureInfo::MergeFrom(from._internal_data_signature());
  }
  if (from.has_region_info()) {
    _internal_mutable_region_info()->::resdb::RegionInfo::MergeFrom(from._internal_region_info());
  }
  if (from.current_view() != 0) {
    _internal_set_current_view(from._internal_current_view());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sender_id() != 0) {
    _internal_set_sender_id(from._internal_sender_id());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.proxy_id() != 0) {
    _internal_set_proxy_id(from._internal_proxy_id());
  }
  if (from.current_executed_seq() != 0) {
    _internal_set_current_executed_seq(from._internal_current_executed_seq());
  }
  if (from.is_system_request() != 0) {
    _internal_set_is_system_request(from._internal_is_system_request());
  }
  if (from.need_response() != 0) {
    _internal_set_need_response(from._internal_need_response());
  }
  if (from.ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hash_, GetArenaForAllocation(),
      &other->hash_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, ret_)
      + sizeof(Request::ret_)
      - PROTOBUF_FIELD_OFFSET(Request, client_info_)>(
          reinterpret_cast<char*>(&client_info_),
          reinterpret_cast<char*>(&other->client_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[1]);
}

// ===================================================================

class ResponseData::_Internal {
 public:
  static const ::resdb::SignatureInfo& signature(const ResponseData* msg);
};

const ::resdb::SignatureInfo&
ResponseData::_Internal::signature(const ResponseData* msg) {
  return *msg->signature_;
}
void ResponseData::clear_signature() {
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
ResponseData::ResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ResponseData)
}
ResponseData::ResponseData(const ResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_signature()) {
    signature_ = new ::resdb::SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:resdb.ResponseData)
}

void ResponseData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
signature_ = nullptr;
}

ResponseData::~ResponseData() {
  // @@protoc_insertion_point(destructor:resdb.ResponseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete signature_;
}

void ResponseData::ArenaDtor(void* object) {
  ResponseData* _this = reinterpret_cast< ResponseData* >(object);
  (void)_this;
}
void ResponseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResponseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ResponseData)
  return target;
}

size_t ResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ResponseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResponseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ResponseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ResponseData)
    MergeFrom(*source);
  }
}

void ResponseData::MergeFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::resdb::SignatureInfo::MergeFrom(from._internal_signature());
  }
}

void ResponseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseData::CopyFrom(const ResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseData::IsInitialized() const {
  return true;
}

void ResponseData::InternalSwap(ResponseData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  swap(signature_, other->signature_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[2]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  resp_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resp_(from.resp_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:resdb.Response)
}

void Response::SharedCtor() {
result_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:resdb.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resp_.Clear();
  result_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.Response.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::resdb::Response_Result>(val));
        } else goto handle_unusual;
        continue;
      // repeated .resdb.ResponseData resp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resp(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.Response.Result result = 1;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // repeated .resdb.ResponseData resp = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resp_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_resp(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.ResponseData resp = 2;
  total_size += 1UL * this->_internal_resp_size();
  for (const auto& msg : this->resp_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .resdb.Response.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resp_.MergeFrom(from.resp_);
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resp_.InternalSwap(&other->resp_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[3]);
}

// ===================================================================

class BatchClientRequest_ClientRequest::_Internal {
 public:
  static const ::resdb::Request& request(const BatchClientRequest_ClientRequest* msg);
  static const ::resdb::SignatureInfo& signature(const BatchClientRequest_ClientRequest* msg);
};

const ::resdb::Request&
BatchClientRequest_ClientRequest::_Internal::request(const BatchClientRequest_ClientRequest* msg) {
  return *msg->request_;
}
const ::resdb::SignatureInfo&
BatchClientRequest_ClientRequest::_Internal::signature(const BatchClientRequest_ClientRequest* msg) {
  return *msg->signature_;
}
void BatchClientRequest_ClientRequest::clear_signature() {
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
BatchClientRequest_ClientRequest::BatchClientRequest_ClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.BatchClientRequest.ClientRequest)
}
BatchClientRequest_ClientRequest::BatchClientRequest_ClientRequest(const BatchClientRequest_ClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::resdb::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::resdb::SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:resdb.BatchClientRequest.ClientRequest)
}

void BatchClientRequest_ClientRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&request_)) + sizeof(id_));
}

BatchClientRequest_ClientRequest::~BatchClientRequest_ClientRequest() {
  // @@protoc_insertion_point(destructor:resdb.BatchClientRequest.ClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchClientRequest_ClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete signature_;
}

void BatchClientRequest_ClientRequest::ArenaDtor(void* object) {
  BatchClientRequest_ClientRequest* _this = reinterpret_cast< BatchClientRequest_ClientRequest* >(object);
  (void)_this;
}
void BatchClientRequest_ClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchClientRequest_ClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchClientRequest_ClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.BatchClientRequest.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchClientRequest_ClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchClientRequest_ClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.BatchClientRequest.ClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.Request request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.BatchClientRequest.ClientRequest)
  return target;
}

size_t BatchClientRequest_ClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.BatchClientRequest.ClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .resdb.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  // int32 id = 3;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchClientRequest_ClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.BatchClientRequest.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchClientRequest_ClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchClientRequest_ClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.BatchClientRequest.ClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.BatchClientRequest.ClientRequest)
    MergeFrom(*source);
  }
}

void BatchClientRequest_ClientRequest::MergeFrom(const BatchClientRequest_ClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.BatchClientRequest.ClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::resdb::Request::MergeFrom(from._internal_request());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::resdb::SignatureInfo::MergeFrom(from._internal_signature());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void BatchClientRequest_ClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.BatchClientRequest.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchClientRequest_ClientRequest::CopyFrom(const BatchClientRequest_ClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.BatchClientRequest.ClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchClientRequest_ClientRequest::IsInitialized() const {
  return true;
}

void BatchClientRequest_ClientRequest::InternalSwap(BatchClientRequest_ClientRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchClientRequest_ClientRequest, id_)
      + sizeof(BatchClientRequest_ClientRequest::id_)
      - PROTOBUF_FIELD_OFFSET(BatchClientRequest_ClientRequest, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchClientRequest_ClientRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[4]);
}

// ===================================================================

class BatchClientRequest::_Internal {
 public:
};

BatchClientRequest::BatchClientRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  client_requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.BatchClientRequest)
}
BatchClientRequest::BatchClientRequest(const BatchClientRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      client_requests_(from.client_requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&createtime_, &from.createtime_,
    static_cast<size_t>(reinterpret_cast<char*>(&local_id_) -
    reinterpret_cast<char*>(&createtime_)) + sizeof(local_id_));
  // @@protoc_insertion_point(copy_constructor:resdb.BatchClientRequest)
}

void BatchClientRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&createtime_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&local_id_) -
    reinterpret_cast<char*>(&createtime_)) + sizeof(local_id_));
}

BatchClientRequest::~BatchClientRequest() {
  // @@protoc_insertion_point(destructor:resdb.BatchClientRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchClientRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchClientRequest::ArenaDtor(void* object) {
  BatchClientRequest* _this = reinterpret_cast< BatchClientRequest* >(object);
  (void)_this;
}
void BatchClientRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchClientRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchClientRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.BatchClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_requests_.Clear();
  ::memset(&createtime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&local_id_) -
      reinterpret_cast<char*>(&createtime_)) + sizeof(local_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchClientRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.BatchClientRequest.ClientRequest client_requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_client_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 createtime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 local_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          local_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchClientRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.BatchClientRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.BatchClientRequest.ClientRequest client_requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_client_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_client_requests(i), target, stream);
  }

  // uint64 createtime = 2;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_createtime(), target);
  }

  // uint64 local_id = 3;
  if (this->local_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_local_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.BatchClientRequest)
  return target;
}

size_t BatchClientRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.BatchClientRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.BatchClientRequest.ClientRequest client_requests = 1;
  total_size += 1UL * this->_internal_client_requests_size();
  for (const auto& msg : this->client_requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 createtime = 2;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createtime());
  }

  // uint64 local_id = 3;
  if (this->local_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_local_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchClientRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.BatchClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchClientRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchClientRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.BatchClientRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.BatchClientRequest)
    MergeFrom(*source);
  }
}

void BatchClientRequest::MergeFrom(const BatchClientRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.BatchClientRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  client_requests_.MergeFrom(from.client_requests_);
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.local_id() != 0) {
    _internal_set_local_id(from._internal_local_id());
  }
}

void BatchClientRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.BatchClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchClientRequest::CopyFrom(const BatchClientRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.BatchClientRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchClientRequest::IsInitialized() const {
  return true;
}

void BatchClientRequest::InternalSwap(BatchClientRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  client_requests_.InternalSwap(&other->client_requests_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchClientRequest, local_id_)
      + sizeof(BatchClientRequest::local_id_)
      - PROTOBUF_FIELD_OFFSET(BatchClientRequest, createtime_)>(
          reinterpret_cast<char*>(&createtime_),
          reinterpret_cast<char*>(&other->createtime_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchClientRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[5]);
}

// ===================================================================

class BatchClientResponse::_Internal {
 public:
};

void BatchClientResponse::clear_signatures() {
  signatures_.Clear();
}
BatchClientResponse::BatchClientResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  response_(arena),
  signatures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.BatchClientResponse)
}
BatchClientResponse::BatchClientResponse(const BatchClientResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      response_(from.response_),
      signatures_(from.signatures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&seq_, &from.seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&proxy_id_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(proxy_id_));
  // @@protoc_insertion_point(copy_constructor:resdb.BatchClientResponse)
}

void BatchClientResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&proxy_id_) -
    reinterpret_cast<char*>(&seq_)) + sizeof(proxy_id_));
}

BatchClientResponse::~BatchClientResponse() {
  // @@protoc_insertion_point(destructor:resdb.BatchClientResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BatchClientResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BatchClientResponse::ArenaDtor(void* object) {
  BatchClientResponse* _this = reinterpret_cast< BatchClientResponse* >(object);
  (void)_this;
}
void BatchClientResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BatchClientResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BatchClientResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.BatchClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_.Clear();
  signatures_.Clear();
  ::memset(&seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&proxy_id_) -
      reinterpret_cast<char*>(&seq_)) + sizeof(proxy_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BatchClientResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_response();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .resdb.SignatureInfo signatures = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signatures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 proxy_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          proxy_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 seq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 current_view = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_view_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 createtime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          createtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 local_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          local_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BatchClientResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.BatchClientResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes response = 1;
  for (int i = 0, n = this->_internal_response_size(); i < n; i++) {
    const auto& s = this->_internal_response(i);
    target = stream->WriteBytes(1, s, target);
  }

  // repeated .resdb.SignatureInfo signatures = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signatures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_signatures(i), target, stream);
  }

  // int32 proxy_id = 3;
  if (this->proxy_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_proxy_id(), target);
  }

  // uint64 seq = 4;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_seq(), target);
  }

  // uint64 current_view = 5;
  if (this->current_view() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_current_view(), target);
  }

  // uint64 createtime = 6;
  if (this->createtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_createtime(), target);
  }

  // uint64 local_id = 7;
  if (this->local_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_local_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.BatchClientResponse)
  return target;
}

size_t BatchClientResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.BatchClientResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes response = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(response_.size());
  for (int i = 0, n = response_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      response_.Get(i));
  }

  // repeated .resdb.SignatureInfo signatures = 2;
  total_size += 1UL * this->_internal_signatures_size();
  for (const auto& msg : this->signatures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 seq = 4;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  // uint64 current_view = 5;
  if (this->current_view() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_current_view());
  }

  // uint64 createtime = 6;
  if (this->createtime() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_createtime());
  }

  // uint64 local_id = 7;
  if (this->local_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_local_id());
  }

  // int32 proxy_id = 3;
  if (this->proxy_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proxy_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BatchClientResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.BatchClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BatchClientResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BatchClientResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.BatchClientResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.BatchClientResponse)
    MergeFrom(*source);
  }
}

void BatchClientResponse::MergeFrom(const BatchClientResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.BatchClientResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  response_.MergeFrom(from.response_);
  signatures_.MergeFrom(from.signatures_);
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
  if (from.current_view() != 0) {
    _internal_set_current_view(from._internal_current_view());
  }
  if (from.createtime() != 0) {
    _internal_set_createtime(from._internal_createtime());
  }
  if (from.local_id() != 0) {
    _internal_set_local_id(from._internal_local_id());
  }
  if (from.proxy_id() != 0) {
    _internal_set_proxy_id(from._internal_proxy_id());
  }
}

void BatchClientResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.BatchClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchClientResponse::CopyFrom(const BatchClientResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.BatchClientResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchClientResponse::IsInitialized() const {
  return true;
}

void BatchClientResponse::InternalSwap(BatchClientResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  response_.InternalSwap(&other->response_);
  signatures_.InternalSwap(&other->signatures_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BatchClientResponse, proxy_id_)
      + sizeof(BatchClientResponse::proxy_id_)
      - PROTOBUF_FIELD_OFFSET(BatchClientResponse, seq_)>(
          reinterpret_cast<char*>(&seq_),
          reinterpret_cast<char*>(&other->seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BatchClientResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[6]);
}

// ===================================================================

class HeartBeatInfo::_Internal {
 public:
};

void HeartBeatInfo::clear_public_keys() {
  public_keys_.Clear();
}
HeartBeatInfo::HeartBeatInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.HeartBeatInfo)
}
HeartBeatInfo::HeartBeatInfo(const HeartBeatInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.HeartBeatInfo)
}

void HeartBeatInfo::SharedCtor() {
}

HeartBeatInfo::~HeartBeatInfo() {
  // @@protoc_insertion_point(destructor:resdb.HeartBeatInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeatInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartBeatInfo::ArenaDtor(void* object) {
  HeartBeatInfo* _this = reinterpret_cast< HeartBeatInfo* >(object);
  (void)_this;
}
void HeartBeatInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeatInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeartBeatInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.HeartBeatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeatInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.CertificateKey public_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeatInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.HeartBeatInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.CertificateKey public_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_public_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.HeartBeatInfo)
  return target;
}

size_t HeartBeatInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.HeartBeatInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.CertificateKey public_keys = 1;
  total_size += 1UL * this->_internal_public_keys_size();
  for (const auto& msg : this->public_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeatInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.HeartBeatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeatInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeatInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.HeartBeatInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.HeartBeatInfo)
    MergeFrom(*source);
  }
}

void HeartBeatInfo::MergeFrom(const HeartBeatInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.HeartBeatInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
}

void HeartBeatInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.HeartBeatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatInfo::CopyFrom(const HeartBeatInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.HeartBeatInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatInfo::IsInitialized() const {
  return true;
}

void HeartBeatInfo::InternalSwap(HeartBeatInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeatInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[7]);
}

// ===================================================================

class ClientCertInfo::_Internal {
 public:
  static const ::resdb::CertificateKey& public_key(const ClientCertInfo* msg);
  static const ::resdb::ReplicaInfo& client_info(const ClientCertInfo* msg);
};

const ::resdb::CertificateKey&
ClientCertInfo::_Internal::public_key(const ClientCertInfo* msg) {
  return *msg->public_key_;
}
const ::resdb::ReplicaInfo&
ClientCertInfo::_Internal::client_info(const ClientCertInfo* msg) {
  return *msg->client_info_;
}
void ClientCertInfo::clear_public_key() {
  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
}
void ClientCertInfo::clear_client_info() {
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
ClientCertInfo::ClientCertInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ClientCertInfo)
}
ClientCertInfo::ClientCertInfo(const ClientCertInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_public_key()) {
    public_key_ = new ::resdb::CertificateKey(*from.public_key_);
  } else {
    public_key_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::resdb::ReplicaInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:resdb.ClientCertInfo)
}

void ClientCertInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&public_key_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&client_info_) -
    reinterpret_cast<char*>(&public_key_)) + sizeof(client_info_));
}

ClientCertInfo::~ClientCertInfo() {
  // @@protoc_insertion_point(destructor:resdb.ClientCertInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientCertInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete public_key_;
  if (this != internal_default_instance()) delete client_info_;
}

void ClientCertInfo::ArenaDtor(void* object) {
  ClientCertInfo* _this = reinterpret_cast< ClientCertInfo* >(object);
  (void)_this;
}
void ClientCertInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCertInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCertInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ClientCertInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && public_key_ != nullptr) {
    delete public_key_;
  }
  public_key_ = nullptr;
  if (GetArenaForAllocation() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCertInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.CertificateKey public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.ReplicaInfo client_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientCertInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ClientCertInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.CertificateKey public_key = 1;
  if (this->has_public_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::public_key(this), target, stream);
  }

  // .resdb.ReplicaInfo client_info = 2;
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::client_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ClientCertInfo)
  return target;
}

size_t ClientCertInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ClientCertInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .resdb.CertificateKey public_key = 1;
  if (this->has_public_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *public_key_);
  }

  // .resdb.ReplicaInfo client_info = 2;
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCertInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ClientCertInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCertInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientCertInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ClientCertInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ClientCertInfo)
    MergeFrom(*source);
  }
}

void ClientCertInfo::MergeFrom(const ClientCertInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ClientCertInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_public_key()) {
    _internal_mutable_public_key()->::resdb::CertificateKey::MergeFrom(from._internal_public_key());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::resdb::ReplicaInfo::MergeFrom(from._internal_client_info());
  }
}

void ClientCertInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ClientCertInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCertInfo::CopyFrom(const ClientCertInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ClientCertInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCertInfo::IsInitialized() const {
  return true;
}

void ClientCertInfo::InternalSwap(ClientCertInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCertInfo, client_info_)
      + sizeof(ClientCertInfo::client_info_)
      - PROTOBUF_FIELD_OFFSET(ClientCertInfo, public_key_)>(
          reinterpret_cast<char*>(&public_key_),
          reinterpret_cast<char*>(&other->public_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCertInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[8]);
}

// ===================================================================

class ClientCertResponse::_Internal {
 public:
};

void ClientCertResponse::clear_public_keys() {
  public_keys_.Clear();
}
void ClientCertResponse::clear_replicas() {
  replicas_.Clear();
}
ClientCertResponse::ClientCertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  public_keys_(arena),
  replicas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.ClientCertResponse)
}
ClientCertResponse::ClientCertResponse(const ClientCertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      public_keys_(from.public_keys_),
      replicas_(from.replicas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.ClientCertResponse)
}

void ClientCertResponse::SharedCtor() {
}

ClientCertResponse::~ClientCertResponse() {
  // @@protoc_insertion_point(destructor:resdb.ClientCertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClientCertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientCertResponse::ArenaDtor(void* object) {
  ClientCertResponse* _this = reinterpret_cast< ClientCertResponse* >(object);
  (void)_this;
}
void ClientCertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClientCertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.ClientCertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  public_keys_.Clear();
  replicas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.CertificateKey public_keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .resdb.ReplicaInfo replicas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_replicas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClientCertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.ClientCertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.CertificateKey public_keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_public_keys(i), target, stream);
  }

  // repeated .resdb.ReplicaInfo replicas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_replicas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_replicas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.ClientCertResponse)
  return target;
}

size_t ClientCertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.ClientCertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.CertificateKey public_keys = 1;
  total_size += 1UL * this->_internal_public_keys_size();
  for (const auto& msg : this->public_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .resdb.ReplicaInfo replicas = 2;
  total_size += 1UL * this->_internal_replicas_size();
  for (const auto& msg : this->replicas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.ClientCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ClientCertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClientCertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.ClientCertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.ClientCertResponse)
    MergeFrom(*source);
  }
}

void ClientCertResponse::MergeFrom(const ClientCertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.ClientCertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_keys_.MergeFrom(from.public_keys_);
  replicas_.MergeFrom(from.replicas_);
}

void ClientCertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.ClientCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientCertResponse::CopyFrom(const ClientCertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.ClientCertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCertResponse::IsInitialized() const {
  return true;
}

void ClientCertResponse::InternalSwap(ClientCertResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  public_keys_.InternalSwap(&other->public_keys_);
  replicas_.InternalSwap(&other->replicas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCertResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[9]);
}

// ===================================================================

class NewReplicaRequest::_Internal {
 public:
  static const ::resdb::ReplicaInfo& replica_info(const NewReplicaRequest* msg);
};

const ::resdb::ReplicaInfo&
NewReplicaRequest::_Internal::replica_info(const NewReplicaRequest* msg) {
  return *msg->replica_info_;
}
void NewReplicaRequest::clear_replica_info() {
  if (GetArenaForAllocation() == nullptr && replica_info_ != nullptr) {
    delete replica_info_;
  }
  replica_info_ = nullptr;
}
NewReplicaRequest::NewReplicaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.NewReplicaRequest)
}
NewReplicaRequest::NewReplicaRequest(const NewReplicaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_replica_info()) {
    replica_info_ = new ::resdb::ReplicaInfo(*from.replica_info_);
  } else {
    replica_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:resdb.NewReplicaRequest)
}

void NewReplicaRequest::SharedCtor() {
replica_info_ = nullptr;
}

NewReplicaRequest::~NewReplicaRequest() {
  // @@protoc_insertion_point(destructor:resdb.NewReplicaRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NewReplicaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete replica_info_;
}

void NewReplicaRequest::ArenaDtor(void* object) {
  NewReplicaRequest* _this = reinterpret_cast< NewReplicaRequest* >(object);
  (void)_this;
}
void NewReplicaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NewReplicaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NewReplicaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.NewReplicaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && replica_info_ != nullptr) {
    delete replica_info_;
  }
  replica_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NewReplicaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.ReplicaInfo replica_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_replica_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NewReplicaRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.NewReplicaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.ReplicaInfo replica_info = 1;
  if (this->has_replica_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::replica_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.NewReplicaRequest)
  return target;
}

size_t NewReplicaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.NewReplicaRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .resdb.ReplicaInfo replica_info = 1;
  if (this->has_replica_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *replica_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NewReplicaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.NewReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NewReplicaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NewReplicaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.NewReplicaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.NewReplicaRequest)
    MergeFrom(*source);
  }
}

void NewReplicaRequest::MergeFrom(const NewReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.NewReplicaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_replica_info()) {
    _internal_mutable_replica_info()->::resdb::ReplicaInfo::MergeFrom(from._internal_replica_info());
  }
}

void NewReplicaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.NewReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewReplicaRequest::CopyFrom(const NewReplicaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.NewReplicaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewReplicaRequest::IsInitialized() const {
  return true;
}

void NewReplicaRequest::InternalSwap(NewReplicaRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(replica_info_, other->replica_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NewReplicaRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[10]);
}

// ===================================================================

class SystemInfoRequest::_Internal {
 public:
};

SystemInfoRequest::SystemInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.SystemInfoRequest)
}
SystemInfoRequest::SystemInfoRequest(const SystemInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request().empty()) {
    request_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:resdb.SystemInfoRequest)
}

void SystemInfoRequest::SharedCtor() {
request_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_ = 0;
}

SystemInfoRequest::~SystemInfoRequest() {
  // @@protoc_insertion_point(destructor:resdb.SystemInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SystemInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SystemInfoRequest::ArenaDtor(void* object) {
  SystemInfoRequest* _this = reinterpret_cast< SystemInfoRequest* >(object);
  (void)_this;
}
void SystemInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SystemInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SystemInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.SystemInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SystemInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.SystemInfoRequest.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::resdb::SystemInfoRequest_Type>(val));
        } else goto handle_unusual;
        continue;
      // bytes request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_request();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.SystemInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.SystemInfoRequest.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // bytes request = 2;
  if (!this->request().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.SystemInfoRequest)
  return target;
}

size_t SystemInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.SystemInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes request = 2;
  if (!this->request().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_request());
  }

  // .resdb.SystemInfoRequest.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.SystemInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.SystemInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.SystemInfoRequest)
    MergeFrom(*source);
  }
}

void SystemInfoRequest::MergeFrom(const SystemInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.SystemInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.request().empty()) {
    _internal_set_request(from._internal_request());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SystemInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.SystemInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemInfoRequest::CopyFrom(const SystemInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.SystemInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfoRequest::IsInitialized() const {
  return true;
}

void SystemInfoRequest::InternalSwap(SystemInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_, GetArenaForAllocation(),
      &other->request_, other->GetArenaForAllocation()
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemInfoRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[11]);
}

// ===================================================================

class RecoveryRequest::_Internal {
 public:
};

RecoveryRequest::RecoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RecoveryRequest)
}
RecoveryRequest::RecoveryRequest(const RecoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_seq_, &from.min_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_seq_) -
    reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
  // @@protoc_insertion_point(copy_constructor:resdb.RecoveryRequest)
}

void RecoveryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_seq_) -
    reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
}

RecoveryRequest::~RecoveryRequest() {
  // @@protoc_insertion_point(destructor:resdb.RecoveryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecoveryRequest::ArenaDtor(void* object) {
  RecoveryRequest* _this = reinterpret_cast< RecoveryRequest* >(object);
  (void)_this;
}
void RecoveryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RecoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_seq_) -
      reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoveryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 min_seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoveryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RecoveryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_seq = 1;
  if (this->min_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_min_seq(), target);
  }

  // uint64 max_seq = 2;
  if (this->max_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RecoveryRequest)
  return target;
}

size_t RecoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RecoveryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min_seq = 1;
  if (this->min_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_seq());
  }

  // uint64 max_seq = 2;
  if (this->max_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoveryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RecoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoveryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoveryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RecoveryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RecoveryRequest)
    MergeFrom(*source);
  }
}

void RecoveryRequest::MergeFrom(const RecoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RecoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_seq() != 0) {
    _internal_set_min_seq(from._internal_min_seq());
  }
  if (from.max_seq() != 0) {
    _internal_set_max_seq(from._internal_max_seq());
  }
}

void RecoveryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RecoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryRequest::CopyFrom(const RecoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RecoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryRequest::IsInitialized() const {
  return true;
}

void RecoveryRequest::InternalSwap(RecoveryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecoveryRequest, max_seq_)
      + sizeof(RecoveryRequest::max_seq_)
      - PROTOBUF_FIELD_OFFSET(RecoveryRequest, min_seq_)>(
          reinterpret_cast<char*>(&min_seq_),
          reinterpret_cast<char*>(&other->min_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoveryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[12]);
}

// ===================================================================

class RecoveryResponse::_Internal {
 public:
};

RecoveryResponse::RecoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  request_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RecoveryResponse)
}
RecoveryResponse::RecoveryResponse(const RecoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.RecoveryResponse)
}

void RecoveryResponse::SharedCtor() {
}

RecoveryResponse::~RecoveryResponse() {
  // @@protoc_insertion_point(destructor:resdb.RecoveryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecoveryResponse::ArenaDtor(void* object) {
  RecoveryResponse* _this = reinterpret_cast< RecoveryResponse* >(object);
  (void)_this;
}
void RecoveryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RecoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecoveryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecoveryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RecoveryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.Request request = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RecoveryResponse)
  return target;
}

size_t RecoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RecoveryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.Request request = 1;
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecoveryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RecoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RecoveryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecoveryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RecoveryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RecoveryResponse)
    MergeFrom(*source);
  }
}

void RecoveryResponse::MergeFrom(const RecoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RecoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  request_.MergeFrom(from.request_);
}

void RecoveryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RecoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoveryResponse::CopyFrom(const RecoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RecoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoveryResponse::IsInitialized() const {
  return true;
}

void RecoveryResponse::InternalSwap(RecoveryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  request_.InternalSwap(&other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecoveryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[13]);
}

// ===================================================================

class RequestWithProof_RequestData::_Internal {
 public:
  static const ::resdb::Request& request(const RequestWithProof_RequestData* msg);
  static const ::resdb::SignatureInfo& signature(const RequestWithProof_RequestData* msg);
};

const ::resdb::Request&
RequestWithProof_RequestData::_Internal::request(const RequestWithProof_RequestData* msg) {
  return *msg->request_;
}
const ::resdb::SignatureInfo&
RequestWithProof_RequestData::_Internal::signature(const RequestWithProof_RequestData* msg) {
  return *msg->signature_;
}
void RequestWithProof_RequestData::clear_signature() {
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
}
RequestWithProof_RequestData::RequestWithProof_RequestData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RequestWithProof.RequestData)
}
RequestWithProof_RequestData::RequestWithProof_RequestData(const RequestWithProof_RequestData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::resdb::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  if (from._internal_has_signature()) {
    signature_ = new ::resdb::SignatureInfo(*from.signature_);
  } else {
    signature_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:resdb.RequestWithProof.RequestData)
}

void RequestWithProof_RequestData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&request_)) + sizeof(signature_));
}

RequestWithProof_RequestData::~RequestWithProof_RequestData() {
  // @@protoc_insertion_point(destructor:resdb.RequestWithProof.RequestData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestWithProof_RequestData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
  if (this != internal_default_instance()) delete signature_;
}

void RequestWithProof_RequestData::ArenaDtor(void* object) {
  RequestWithProof_RequestData* _this = reinterpret_cast< RequestWithProof_RequestData* >(object);
  (void)_this;
}
void RequestWithProof_RequestData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestWithProof_RequestData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestWithProof_RequestData::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RequestWithProof.RequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && signature_ != nullptr) {
    delete signature_;
  }
  signature_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestWithProof_RequestData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .resdb.SignatureInfo signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_signature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestWithProof_RequestData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RequestWithProof.RequestData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.Request request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::signature(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RequestWithProof.RequestData)
  return target;
}

size_t RequestWithProof_RequestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RequestWithProof.RequestData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .resdb.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // .resdb.SignatureInfo signature = 2;
  if (this->has_signature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *signature_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestWithProof_RequestData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RequestWithProof.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestWithProof_RequestData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestWithProof_RequestData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RequestWithProof.RequestData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RequestWithProof.RequestData)
    MergeFrom(*source);
  }
}

void RequestWithProof_RequestData::MergeFrom(const RequestWithProof_RequestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RequestWithProof.RequestData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request()) {
    _internal_mutable_request()->::resdb::Request::MergeFrom(from._internal_request());
  }
  if (from.has_signature()) {
    _internal_mutable_signature()->::resdb::SignatureInfo::MergeFrom(from._internal_signature());
  }
}

void RequestWithProof_RequestData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RequestWithProof.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWithProof_RequestData::CopyFrom(const RequestWithProof_RequestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RequestWithProof.RequestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWithProof_RequestData::IsInitialized() const {
  return true;
}

void RequestWithProof_RequestData::InternalSwap(RequestWithProof_RequestData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestWithProof_RequestData, signature_)
      + sizeof(RequestWithProof_RequestData::signature_)
      - PROTOBUF_FIELD_OFFSET(RequestWithProof_RequestData, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestWithProof_RequestData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[14]);
}

// ===================================================================

class RequestWithProof::_Internal {
 public:
  static const ::resdb::Request& request(const RequestWithProof* msg);
};

const ::resdb::Request&
RequestWithProof::_Internal::request(const RequestWithProof* msg) {
  return *msg->request_;
}
RequestWithProof::RequestWithProof(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  proofs_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RequestWithProof)
}
RequestWithProof::RequestWithProof(const RequestWithProof& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proofs_(from.proofs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_request()) {
    request_ = new ::resdb::Request(*from.request_);
  } else {
    request_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:resdb.RequestWithProof)
}

void RequestWithProof::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&request_)) + sizeof(seq_));
}

RequestWithProof::~RequestWithProof() {
  // @@protoc_insertion_point(destructor:resdb.RequestWithProof)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestWithProof::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete request_;
}

void RequestWithProof::ArenaDtor(void* object) {
  RequestWithProof* _this = reinterpret_cast< RequestWithProof* >(object);
  (void)_this;
}
void RequestWithProof::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestWithProof::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestWithProof::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RequestWithProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proofs_.Clear();
  if (GetArenaForAllocation() == nullptr && request_ != nullptr) {
    delete request_;
  }
  request_ = nullptr;
  seq_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestWithProof::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .resdb.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .resdb.RequestWithProof.RequestData proofs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_proofs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 seq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestWithProof::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RequestWithProof)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .resdb.Request request = 1;
  if (this->has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  // repeated .resdb.RequestWithProof.RequestData proofs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_proofs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_proofs(i), target, stream);
  }

  // uint64 seq = 3;
  if (this->seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RequestWithProof)
  return target;
}

size_t RequestWithProof::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RequestWithProof)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.RequestWithProof.RequestData proofs = 2;
  total_size += 1UL * this->_internal_proofs_size();
  for (const auto& msg : this->proofs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .resdb.Request request = 1;
  if (this->has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_);
  }

  // uint64 seq = 3;
  if (this->seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestWithProof::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RequestWithProof)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestWithProof* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestWithProof>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RequestWithProof)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RequestWithProof)
    MergeFrom(*source);
  }
}

void RequestWithProof::MergeFrom(const RequestWithProof& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RequestWithProof)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  proofs_.MergeFrom(from.proofs_);
  if (from.has_request()) {
    _internal_mutable_request()->::resdb::Request::MergeFrom(from._internal_request());
  }
  if (from.seq() != 0) {
    _internal_set_seq(from._internal_seq());
  }
}

void RequestWithProof::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RequestWithProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestWithProof::CopyFrom(const RequestWithProof& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RequestWithProof)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestWithProof::IsInitialized() const {
  return true;
}

void RequestWithProof::InternalSwap(RequestWithProof* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  proofs_.InternalSwap(&other->proofs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestWithProof, seq_)
      + sizeof(RequestWithProof::seq_)
      - PROTOBUF_FIELD_OFFSET(RequestWithProof, request_)>(
          reinterpret_cast<char*>(&request_),
          reinterpret_cast<char*>(&other->request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestWithProof::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[15]);
}

// ===================================================================

class RequestSet::_Internal {
 public:
};

RequestSet::RequestSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  requests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.RequestSet)
}
RequestSet::RequestSet(const RequestSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      requests_(from.requests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.RequestSet)
}

void RequestSet::SharedCtor() {
}

RequestSet::~RequestSet() {
  // @@protoc_insertion_point(destructor:resdb.RequestSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RequestSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestSet::ArenaDtor(void* object) {
  RequestSet* _this = reinterpret_cast< RequestSet* >(object);
  (void)_this;
}
void RequestSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestSet::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.RequestSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  requests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.RequestWithProof requests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.RequestSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.RequestWithProof requests = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_requests(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.RequestSet)
  return target;
}

size_t RequestSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.RequestSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.RequestWithProof requests = 1;
  total_size += 1UL * this->_internal_requests_size();
  for (const auto& msg : this->requests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.RequestSet)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.RequestSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.RequestSet)
    MergeFrom(*source);
  }
}

void RequestSet::MergeFrom(const RequestSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.RequestSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  requests_.MergeFrom(from.requests_);
}

void RequestSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.RequestSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestSet::CopyFrom(const RequestSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.RequestSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestSet::IsInitialized() const {
  return true;
}

void RequestSet::InternalSwap(RequestSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  requests_.InternalSwap(&other->requests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[16]);
}

// ===================================================================

class QueryRequest::_Internal {
 public:
};

QueryRequest::QueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.QueryRequest)
}
QueryRequest::QueryRequest(const QueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_seq_, &from.min_seq_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_seq_) -
    reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
  // @@protoc_insertion_point(copy_constructor:resdb.QueryRequest)
}

void QueryRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_seq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_seq_) -
    reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
}

QueryRequest::~QueryRequest() {
  // @@protoc_insertion_point(destructor:resdb.QueryRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryRequest::ArenaDtor(void* object) {
  QueryRequest* _this = reinterpret_cast< QueryRequest* >(object);
  (void)_this;
}
void QueryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_seq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_seq_) -
      reinterpret_cast<char*>(&min_seq_)) + sizeof(max_seq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 min_seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 max_seq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.QueryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 min_seq = 1;
  if (this->min_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_min_seq(), target);
  }

  // uint64 max_seq = 2;
  if (this->max_seq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_max_seq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.QueryRequest)
  return target;
}

size_t QueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.QueryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 min_seq = 1;
  if (this->min_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_min_seq());
  }

  // uint64 max_seq = 2;
  if (this->max_seq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_max_seq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.QueryRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.QueryRequest)
    MergeFrom(*source);
  }
}

void QueryRequest::MergeFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.QueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_seq() != 0) {
    _internal_set_min_seq(from._internal_min_seq());
  }
  if (from.max_seq() != 0) {
    _internal_set_max_seq(from._internal_max_seq());
  }
}

void QueryRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryRequest::CopyFrom(const QueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.QueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryRequest::IsInitialized() const {
  return true;
}

void QueryRequest::InternalSwap(QueryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QueryRequest, max_seq_)
      + sizeof(QueryRequest::max_seq_)
      - PROTOBUF_FIELD_OFFSET(QueryRequest, min_seq_)>(
          reinterpret_cast<char*>(&min_seq_),
          reinterpret_cast<char*>(&other->min_seq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[17]);
}

// ===================================================================

class QueryResponse::_Internal {
 public:
};

QueryResponse::QueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  transactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:resdb.QueryResponse)
}
QueryResponse::QueryResponse(const QueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      transactions_(from.transactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:resdb.QueryResponse)
}

void QueryResponse::SharedCtor() {
}

QueryResponse::~QueryResponse() {
  // @@protoc_insertion_point(destructor:resdb.QueryResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void QueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void QueryResponse::ArenaDtor(void* object) {
  QueryResponse* _this = reinterpret_cast< QueryResponse* >(object);
  (void)_this;
}
void QueryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:resdb.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transactions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .resdb.Request transactions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QueryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:resdb.QueryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .resdb.Request transactions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_transactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_transactions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:resdb.QueryResponse)
  return target;
}

size_t QueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:resdb.QueryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .resdb.Request transactions = 1;
  total_size += 1UL * this->_internal_transactions_size();
  for (const auto& msg : this->transactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QueryResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:resdb.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QueryResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:resdb.QueryResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:resdb.QueryResponse)
    MergeFrom(*source);
  }
}

void QueryResponse::MergeFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:resdb.QueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  transactions_.MergeFrom(from.transactions_);
}

void QueryResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:resdb.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResponse::CopyFrom(const QueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:resdb.QueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResponse::IsInitialized() const {
  return true;
}

void QueryResponse::InternalSwap(QueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  transactions_.InternalSwap(&other->transactions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_proto_2fresdb_2eproto_getter, &descriptor_table_proto_2fresdb_2eproto_once,
      file_level_metadata_proto_2fresdb_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace resdb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::resdb::ResDBMessage* Arena::CreateMaybeMessage< ::resdb::ResDBMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ResDBMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::Request* Arena::CreateMaybeMessage< ::resdb::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ResponseData* Arena::CreateMaybeMessage< ::resdb::ResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::Response* Arena::CreateMaybeMessage< ::resdb::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::BatchClientRequest_ClientRequest* Arena::CreateMaybeMessage< ::resdb::BatchClientRequest_ClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::BatchClientRequest_ClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::BatchClientRequest* Arena::CreateMaybeMessage< ::resdb::BatchClientRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::BatchClientRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::BatchClientResponse* Arena::CreateMaybeMessage< ::resdb::BatchClientResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::BatchClientResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::HeartBeatInfo* Arena::CreateMaybeMessage< ::resdb::HeartBeatInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::HeartBeatInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ClientCertInfo* Arena::CreateMaybeMessage< ::resdb::ClientCertInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ClientCertInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::ClientCertResponse* Arena::CreateMaybeMessage< ::resdb::ClientCertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::ClientCertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::NewReplicaRequest* Arena::CreateMaybeMessage< ::resdb::NewReplicaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::NewReplicaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::SystemInfoRequest* Arena::CreateMaybeMessage< ::resdb::SystemInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::SystemInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RecoveryRequest* Arena::CreateMaybeMessage< ::resdb::RecoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RecoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RecoveryResponse* Arena::CreateMaybeMessage< ::resdb::RecoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RecoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RequestWithProof_RequestData* Arena::CreateMaybeMessage< ::resdb::RequestWithProof_RequestData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RequestWithProof_RequestData >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RequestWithProof* Arena::CreateMaybeMessage< ::resdb::RequestWithProof >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RequestWithProof >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::RequestSet* Arena::CreateMaybeMessage< ::resdb::RequestSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::RequestSet >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::QueryRequest* Arena::CreateMaybeMessage< ::resdb::QueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::QueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::resdb::QueryResponse* Arena::CreateMaybeMessage< ::resdb::QueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::resdb::QueryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
